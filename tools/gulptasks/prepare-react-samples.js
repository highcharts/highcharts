const gulp = require('gulp');

// Gulp task to transpile .jsx to .mjs
async function transpileJSXSamples() {
    const config = {
        jsc: {
            parser: {
                syntax: 'ecmascript',
                jsx: true
            },
            target: 'es2020' // Set the desired JavaScript version
        },
        module: {
            type: 'es6'
        }
    };

    const isGeneratedText = 'file is generated by the prepare-react-samples gulp task';

    function html(strings, ...values) {
        let str = `
            <!---
                DO NOT EDIT: ${isGeneratedText}
            --->

            <script type="importmap">
            {
                "imports": {
                    "react": "https://esm.sh/react@19.1.0",
                    "react-dom": "https://esm.sh/react-dom@19.1.0/client",
                    "react-dom/": "https://esm.sh/react-dom@19.1.0/",
                    "@highcharts/react": "https://unpkg.com/@highcharts/react@next/index.js",
                    "@highcharts/react/": "https://unpkg.com/@highcharts/react@next/",
                    "highcharts/": "https://unpkg.com/highcharts@12.2.0/"
                }
            }
            </script>
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.9.0/build/styles/a11y-light.min.css">
            <figure class="highcharts-figure">
                    <div id="container"></div>
            </figure>`;

        for (let i = 0; i < strings.length; i++) {
            str += strings[i];

            if (i < strings.length - 1) {
                str += values[i];
            }
        }

        return str;
    }

    const styles = `
#container {
    min-height: 400px;
}

details {
    border-radius: 8px;
    overflow: hidden;
    margin: 20px auto;

    >pre {
        padding: 12px 16px;
        margin: 0;
        font-size: 0.95em;
        color: #333;
        line-height: 1.6;
    }

    summary {
        background-color: #545ecc;
        color: white;
        font-weight: bold;
        font-family: sans-serif;
        padding: 12px 16px;
        cursor: pointer;
        border: none;
        outline: none;
        user-select: none;

        &:focus {
            border: 3px dashed yellow;
        }
    }
}
`;

    const { glob } = require('glob');
    const swc = require('@swc/core');

    const hljs = require('highlight.js');

    const jsxFiles = glob.iterate('samples/**/demo.jsx');

    const { writeFile, readFile, stat } = require('node:fs/promises');

    for await (const jsxPath of jsxFiles) {
        const originalCode = await readFile(jsxPath, 'utf8');
        const output = await swc.transform(originalCode, config);

        const adjecentHTMLFile = jsxPath.replace('.jsx', '.html');

        await writeFile(
            adjecentHTMLFile,
            html`<style nonce="highcharts">${styles}</style><details><summary>Code</summary><pre><code>${hljs.highlight(originalCode, { language: 'javascript' }).value}</code></pre></details>`,
            { force: true }
        );

        await writeFile(jsxPath.replace('.jsx', '.mjs'), `// DO NOT EDIT, ${isGeneratedText}\n` + output.code);
    }

}

module.exports = {
    transpileJSXSamples
};

gulp.task('prepare-react-samples', transpileJSXSamples);
