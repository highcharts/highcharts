/*
 * Copyright (C) Highsoft AS
 */

const gulp = require('gulp');
const log = require('../libs/log');

function treeToMappingRecursive(key, branch, keyPath, mapping = {}) {
    if (branch.children) {
        keyPath.push(key);
        Object.entries(branch.children).forEach(([subkey, child]) => {
            treeToMappingRecursive(subkey, child, keyPath, mapping);
        });
        keyPath.pop();
    }
    if (branch.doclet && branch.doclet.requires) {
        const fullKey = (keyPath.filter(Boolean).join('.') + '.' + key)
            .replace(/^\./, '');
        mapping[
            fullKey
        ] = branch.doclet.requires.map(r => r.replace(/module:/, ''));
    }
    return mapping;
}

/**
 * Create the DependencyMapping module file
 *
 * @return {Promise<void>}
 *         Promise to keep
 */
async function dependencyMapping() {
    const fs = require('fs').promises,
        path = require('path');

    const mapping = {};

    for (const product of ['highcharts', 'highstock', 'highmaps', 'gantt']) {
        const treeJsonPath = path.join(
                __dirname,
                `../../build/api/${product}/tree.json`
            ),
            treeJson = await fs.readFile(treeJsonPath, 'utf8'),
            tree = JSON.parse(treeJson);

        log.message(`Reading ${treeJsonPath} ...`);

        const productSpecificMapping = treeToMappingRecursive(
            void 0,
            { children: tree },
            []
        );

        Object.assign(mapping, productSpecificMapping);
    }

    // Remove unnecessary definitions at lower levels
    Object.entries(mapping).forEach(([key, value]) => {
        const parentKey = key.split('.').slice(0, -1).join('.');
        if (
            mapping[parentKey] &&
            mapping[parentKey].toString() === value.toString()
        ) {
            delete mapping[key];
        }
    });

    const mappingString = JSON.stringify(mapping, null, 4).replace(/"/g, '\'');

    await fs.writeFile(
        path.join(
            __dirname,
            '../../ts/Extensions/Autoload/DependencyMapping.ts'
        ),
        `/**
 * Dependencies for the autoload feature.
 *
 * DO NOT EDIT THIS FILE. This file is generated using the
 * 'gulp dependency-mapping' task.
 */
const DependencyMapping: Record<string, Array<string>> = ${mappingString};
export default DependencyMapping;
`,
        'utf8'
    );
    log.success(
        'Wrote references to ts/Extensions/Autoload/DependencyMapping.ts'
    );

}

require('./jsdoc');

gulp.task('dependency-mapping', gulp.series('jsdoc', dependencyMapping));
