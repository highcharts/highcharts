/*
 * Copyright (C) Highsoft AS
 */

const gulp = require('gulp');
const log = require('../libs/log');

/**
 * Create language ts files from JSON
 *
 * @return {Promise<void>}
 *         Promise to keep
 */
async function langBuild() {
    const { resolve } = require('node:path');
    const { readdir, writeFile } = require('node:fs/promises');

    const assert = require('node:assert');

    const LANG_DIR = 'i18n';
    const TS_FOLDER = 'ts/masters/i18n';


    const langBase = require(resolve(LANG_DIR, 'lang.json'));
    const baseKeys = Object.keys(langBase);


    function getNestedKeys(obj, path = '') {
        return Object.entries(obj)
            .flatMap(([key, value]) => {
                if (typeof value === 'object') {
                    return getNestedKeys(value, `${path}${key}.`);
                }

                return `${path}${key}`;
            });
    }

    const nestedBaseKeys = getNestedKeys(langBase).sort();

    const langFiles = (
        await readdir(LANG_DIR, {
            withFileTypes: true
        })
    )
        .filter(
            dirent => dirent.isFile() &&
            dirent.name !== 'lang.json' &&
            dirent.name.endsWith('.json')
        )
        .map(dirent => dirent.name);

    // eslint-disable-next-line
    const template = (jsonContent, lang) => `/**
* @license Highcharts JS v@product.version@ (@product.date@)
* @module highcharts/i18n/${lang}
* @requires highcharts
*
* ${lang} language pack
*
* (c) 2009-2024 Torstein Honsi
*
* License: www.highcharts.com/license
*
* **Do not edit this file!** This file is generated using the 'gulp lang-build' task.
*/

import D from '../../Core/Defaults.js';

const { setOptions } = D;

const languageOptions = ${JSON.stringify(jsonContent, null, 4)};

setOptions({
    lang: languageOptions
});

// Export Highcharts
export default D;
`;


    for (const langFile of langFiles) {
        const jsonContent = require(resolve(LANG_DIR, langFile));

        // Consistency checks
        assert.equal(
            baseKeys.length,
            Object.keys(jsonContent).length,
            `Keys in ${langFile} should match keys in lang.json`
        );

        const translationKeys = getNestedKeys(jsonContent).sort();

        let mismatches = 0;
        for (let i = 0; i < nestedBaseKeys.length; i++) {
            if (nestedBaseKeys[i] !== translationKeys[i]) {
                // eslint-disable-next-line no-console
                assert.equal(
                    nestedBaseKeys[i],
                    translationKeys[i],
                    `Keys should match in ${langFile}: ${nestedBaseKeys[i]} !== ${translationKeys[i]}`
                );

                if (mismatches > 10) {
                    break;
                }

                mismatches++;
            }
        }

        assert.deepEqual(
            nestedBaseKeys,
            translationKeys,
            `Keys in ${langFile} should match keys in lang.json`
        );

        const tsContent = template(jsonContent, jsonContent.locale);
        const outputFile = resolve(
            TS_FOLDER,
            `${langFile.replace('.json', '')}.src.ts`
        );

        await writeFile(
            outputFile,
            tsContent
        ).catch(e => {
            log.error(`Error writing ${outputFile}: ${e.message}`);

            throw e;
        });

        log.success(`Created ${outputFile}`);
    }

}

gulp.task('lang-build', langBuild);

gulp.task('lang-build:watch', () => gulp.watch(['i18n/**/*.json'], cb => {
    log.message('Language files changed, rebuilding...');
    langBuild();
    cb();
}));
