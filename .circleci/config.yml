version: 2.1

######### Anchors ####################
defaults: &defaults
  executor: node_image
  working_directory: /home/circleci/repo/highcharts

persist_workspace: &persist_workspace
  - persist_to_workspace:
      root: ~/repo
      paths: .

load_workspace: &load_workspace
  - attach_workspace:
      at: ~/repo

add_gh_keys: &add_gh_keys
  - add_ssh_keys:
      fingerprints:
        - "57:bb:46:ef:f4:22:f7:f3:67:5e:1f:2a:ad:7f:98:f6"
add_to_ssh_config: &add_to_ssh_config
  - run:
      name: Avoid hosts unknown for github
      command: echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
add_gh_user_config: &add_gh_user_config
  - run:
      name: Github user config
      command: |
        git config --global user.name "CircleCI"
        git config --global user.email "technical+circleci_mu@highsoft.com"

#######################################

executors:
  node_image:
    docker:
      - image: circleci/node:lts-browsers

commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

jobs:
  checkout_code:
    <<: *defaults
    steps:
      # rather than using the checkout keyword we checkout via commandline
      # to avoid a huge and slow checkout depth
     - <<: *add_gh_keys
     - <<: *add_to_ssh_config
     - run:
         name: Clone GitHub highcharts repository
         command: |
           if [ -n "$CIRCLE_TAG" ]; then
            git clone --branch "${CIRCLE_TAG}" ${CIRCLE_REPOSITORY_URL} --depth=1 /home/circleci/repo/highcharts
           else
            git clone -b ${CIRCLE_BRANCH} --single-branch ${CIRCLE_REPOSITORY_URL} --depth=1 /home/circleci/repo/highcharts
           fi
     - <<: *persist_workspace

  install_dependencies:
    <<: *defaults
    steps:
      # Restore checked out code and built dependencies.
      - << : *load_workspace
      - run: node --version && npm --version
      - run: npm install --quiet
      - <<: *persist_workspace

  generate_ts_declarations:
    <<: *defaults
    steps:
      - << : *load_workspace
      - run:
          name: Generate highcharts ts declarations
          command: npx gulp jsdoc-dts && npx gulp lint-dts
      - <<: *persist_workspace

  test:
    <<: *defaults
    steps:
      - << : *load_workspace
      - run: npm test
      - run: mkdir ../test-results
      - run:
          name: Save test results
          command: |
            find . -type f -regex ".*TESTS.*xml" -exec cp {} ../test-results/ \;
          when: always
      - store_test_results:
          path: ../test-results
      - store_artifacts:
          path: ../test-results

  test_browsers:
    <<: *defaults
    description: Run tests with different browser configs at BrowserStack
    parameters:
      browsers:
        description: "Which browser to test?"
        type: string
        default: "Mac.Safari"
      browsercount:
        description: "Number of browser instances"
        type: integer
        default: 1
    steps:
      - early_return_for_forked_pull_requests # to avoid secrets being passed on to forked PR builds we don't run browser tests for forked PRs
      - << : *load_workspace
      - run: npm run gulp scripts
      - run: "npx cross-env NODE_OPTIONS=--max_old_space_size=3072 karma start test/karma-conf.js --single-run --splitbrowsers << parameters.browsers >> --browsercount << parameters.browsercount >>"
      - run: mkdir ../test-results
      - run:
          name: Save test results
          command: |
            find . -type f -regex ".*TESTS.*xml" -exec cp {} ../test-results/ \;
          when: always
      - store_test_results:
          path: ../test-results
      - store_artifacts:
          path: ../test-results

  build_dist:
    <<: *defaults
    steps:
      - <<: *load_workspace
      - run:
          name: Compile build
          command: npm run build
      - <<: *persist_workspace

  deploy_code:
    <<: *defaults
    steps:
      - <<: *load_workspace
      - run:
          name: Upload code to S3
          command: npx gulp dist-upload

  deploy_api_docs:
    <<: *defaults
    steps:
      - <<: *load_workspace
      - run:
          name: Generate api docs
          command: npx gulp jsdoc
      - run:
          name: Upload api docs to S3
          command: npx gulp upload-api --silent
      - run: echo -e "API docs deployed to https://s3.eu-central-1.amazonaws.com/${HIGHCHARTS_APIDOCS_BUCKET}/highcharts/index.html"

  deploy_changelog:
    <<: *defaults
    steps:
      - <<: *load_workspace
      - <<: *add_gh_keys
      - <<: *add_to_ssh_config
      - run:
          name: Fetch full highcharts/master branch
          command: git fetch --unshallow
      - run:
          name: Generate changelog since last tag
          command: (git describe --abbrev=0 --tags | xargs -I{} node changelog/generate --since {}) && node changelog/generate-html
      - run:
          name: Changelog - Create git-describe named folder and copy changelog
          command: git ls-files -m --others --exclude-standard | grep -i changelog | cpio -pdm "$(git describe)/"
      - run:
          name: Changelog - Upload changelog
          command: git ls-files -m --others --exclude-standard | grep -i changelog | tr '\n' ',' | sed 's/,$/\n/' | xargs npx gulp upload-files --bucket ${HIGHCHARTS_CHANGELOG_BUCKET} --files
      - run: echo -e "Changelog deployed to https://s3.eu-central-1.amazonaws.com/${HIGHCHARTS_CHANGELOG_BUCKET}/changelog/changelog.html"

  deploy_to_highcharts_dist:
    <<: *defaults
    steps:
      - <<: *load_workspace
      - <<: *add_gh_keys
      - <<: *add_to_ssh_config
      - <<: *add_gh_user_config
      - run:
          name: Clone highcharts-dist repository
          command: git clone -b master --single-branch git@github.com:highcharts/highcharts-dist.git --depth=1 /home/circleci/repo/highcharts-dist
      - run:
          name: Delete remote nightly branch
          command: cd ../highcharts-dist && git push origin --delete nightly || true
      - run:
          name: Run copy-release
          command: cd ../highcharts && node copy-release
      - run:
          name: Push to highcharts-dist nightly branch
          command: |
            cd ../highcharts-dist
            git checkout -b nightly
            git add .
            git commit -m"Nightly build - ${CIRCLE_BUILD_NUM}"
            git push -u origin nightly
workflows:
  version: 2
#  build_and_test:
#    jobs:
#      - checkout_code
#      - install_dependencies:
#          requires:
#            - checkout_code
#      - generate_ts_declarations:
#          requires:
#            - install_dependencies
#      - test_browsers:
#          name: "test-Mac.Safari"
#          requires:
#            - install_dependencies
#          browsers: "Mac.Safari"
#      - test_browsers:
#          name: "test-Win.Chrome"
#          requires:
#            - "test-Mac.Safari"
#          browsers: "Win.Chrome"
#      - test_browsers:
#          name: "test-Mac.Firefox"
#          requires:
#            - "test-Win.Chrome"
#          browsers: "Mac.Firefox"
#      - test_browsers:
#          name: "test-Win.IE8"
#          requires:
#            - "test-Mac.Firefox"
#          browsers: "Win.IE8 --oldie"

  nightly:
    #triggers:
    #  - schedule:
    #      cron: "0 2 * * *" # 2 am every night
    #      filters:
    #        branches:
    #          only:
    #            - feature/ci-nightly
    jobs:
      - checkout_code
      - install_dependencies:
          requires:
            - checkout_code
#      - generate_ts_declarations:
#          requires:
#            - install_dependencies
#      - test_browsers:
#          name: "test-Mac.Safari"
#          requires:
#            - install_dependencies
#          browsers: "Mac.Safari"
#      - test_browsers:
#          name: "test-Win.Chrome"
#          requires:
#            - "test-Mac.Safari"
#      - test_browsers:
#          name: "test-Mac.Firefox"
#          requires:
#            - "test-Win.Chrome"
#          browsers: "Mac.Firefox"
#      - test_browsers:
#          name: "test-Win.IE8"
#          requires:
#            - "test-Mac.Firefox"
#          browsers: "Win.IE8 --oldie"
      - build_dist:
          requires:
            - install_dependencies
#            - "test-Mac.Firefox"
#            - "test-Mac.Safari"
#            - "test-Win.IE8"
#            - generate_ts_declarations
      - deploy_code:
          requires:
            - build_dist
          context: highcharts-staging
          filters:
            branches:
              only:
                - feature/ci-nightly
      - deploy_api_docs:
          requires:
            - build_dist
          context: highcharts-staging
          filters:
            branches:
              only:
                - feature/ci-nightly
      - deploy_changelog:
          requires:
            - build_dist
          context: highcharts-staging
          filters:
            branches:
              only:
                - feature/ci-nightly
      - deploy_to_highcharts_dist:
          requires:
            - build_dist
          context: highcharts-staging
          filters:
            branches:
              only:
                - feature/ci-nightly

