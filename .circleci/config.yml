version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.11
  slack: circleci/slack@3.4.1

parameters:
  run_reset_tests:
    type: boolean
    default: false
  reset_tests:
    type: string
    default: ""
######### Anchors ####################
defaults: &defaults
  executor: node_image
  working_directory: /home/circleci/repo/highcharts

persist_workspace: &persist_workspace
  - persist_to_workspace:
      root: ~/repo
      paths: .

load_workspace: &load_workspace
  - attach_workspace:
      at: ~/repo

load_source_from_cache: &load_source_from_cache
  - restore_cache:
      keys:
        - source-{{ .Environment.HIGHCHARTS_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
        - source-{{ .Environment.HIGHCHARTS_CACHE_VERSION }}-{{ .Branch }}
        - source-{{ .Environment.HIGHCHARTS_CACHE_VERSION }}-

add_gh_keys: &add_gh_keys
  - add_ssh_keys:
      fingerprints:
        - "57:bb:46:ef:f4:22:f7:f3:67:5e:1f:2a:ad:7f:98:f6"
add_to_ssh_config: &add_to_ssh_config
  - run:
      name: Avoid hosts unknown for github
      command: echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
add_gh_user_config: &add_gh_user_config
  - run:
      name: Github user config
      command: |
        git config --global user.name "CircleCI"
        git config --global user.email "technical+circleci_mu@highsoft.com"

#######################################

executors:
  node_image:
    docker:
      - image: circleci/node:lts-browsers

commands:
  generate_references_command:
    parameters:
      browsercount:
        type: integer
        default: 1
    steps:
      - run: "npx karma start test/karma-conf.js --tests highcharts/*/* --reference --browsercount << parameters.browsercount >> --no-fail-on-empty-test-suite"
      - run: "npx karma start test/karma-conf.js --tests maps/*/* --reference --browsercount << parameters.browsercount >> --no-fail-on-empty-test-suite"
      - run: "npx karma start test/karma-conf.js --tests stock/*/* --reference --browsercount << parameters.browsercount >> --no-fail-on-empty-test-suite"
      - run: "npx karma start test/karma-conf.js --tests gantt/*/* --reference --browsercount << parameters.browsercount >> --no-fail-on-empty-test-suite"

jobs:
  checkout_and_install:
    <<: *defaults
    steps:
      # rather than using the checkout keyword we checkout via commandline
      # to avoid a huge and slow checkout depth
     - <<: *add_gh_keys
     - <<: *add_to_ssh_config
     - << : *load_source_from_cache
     # Temporary workaround for https://discuss.circleci.com/t/22437
     - run: |
        if [ -n "$CIRCLE_TAG" ]
        then
          git fetch --force origin "refs/tags/${CIRCLE_TAG}:refs/tags/${CIRCLE_TAG}"
        fi
     - checkout
     - save_cache:
         key: source-{{ .Environment.HIGHCHARTS_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
         paths:
           - ".git"
     - run: node --version && npm --version
     - restore_cache:
         keys:
           - npm-deps-{{ .Environment.HIGHCHARTS_CACHE_VERSION }}-{{ .Branch }}-{{ checksum "package.json" }}
           - npm-deps-{{ .Environment.HIGHCHARTS_CACHE_VERSION }}-{{ .Branch }}
     - run: npm install --quiet
     - save_cache:
         paths:
           - /home/circleci/repo/highcharts/node_modules
         key: npm-deps-{{ .Environment.HIGHCHARTS_CACHE_VERSION }}-{{ .Branch }}-{{ checksum "package.json" }}
     - run: npm run gulp scripts
     - run: git diff --name-only --exit-code || (echo "Untracked files found. Did you forget to commit any transpiled files? Failing build now as this likely will trigger errors later in the build.." && exit 1)
     - <<: *persist_workspace

  generate_ts_declarations:
    <<: *defaults
    steps:
      - << : *load_workspace
      - run:
          name: Generate highcharts ts declarations
          command: npx gulp jsdoc-dts && npx gulp lint-dts

  lint:
    <<: *defaults
    steps:
      - << : *load_workspace
      - run:
          name: Execute linting
          command: npx gulp lint

  test_browsers:
    <<: *defaults
    description: Run tests with different browser configs at BrowserStack
    parameters:
      browsers:
        description: "Which browser to test?"
        type: string
        default: "Mac.Safari"
      browsercount:
        description: "Number of browser instances"
        type: integer
        default: 1
      notify_on_failure:
        type: boolean
        default: false
    steps:
      - << : *load_workspace
      - run:
          command: "npx cross-env NODE_OPTIONS=--max_old_space_size=3072 karma start test/karma-conf.js --single-run --splitbrowsers << parameters.browsers >> --browsercount << parameters.browsercount >>"
          no_output_timeout: 20m
      - when:
          condition: << parameters.notify_on_failure >>
          steps:
            - slack/status:
                fail_only: true

  test_timezones:
    <<: *defaults
    description: Run tests with different browser configs at BrowserStack
    parameters:
      browsers:
        description: "Which browser to test?"
        type: string
        default: "ChromeHeadless"
    steps:
      - <<: *load_workspace
      - run: ./.circleci/scripts/test_timezones.sh -b=<<parameters.browsers>>

  check_for_docs_changes_and_deploy:
    <<: *defaults
    description: Checks for changes in docs/ and triggers deploy via doc-builder
    parameters:
      always_deploy:
        description: "Deploy regardless of finding changes in docs/ on last commit"
        type: boolean
        default: false
    steps:
      - <<: *load_workspace
      - run: ./.circleci/scripts/check_and_trigger_docs_deploy.sh  --bucket=${DOCS_DEPLOY_BUCKET} --token=${CIRCLE_API_TOKEN} <<# parameters.always_deploy >>-f<</ parameters.always_deploy >>

  generate_release_reference_images:
    <<: *defaults
    description: Generate visual tests reference images
    steps:
      - <<: *load_workspace
      - generate_references_command
      - run: "mkdir -p /home/circleci/repo/tmp/latest/"
      - aws-s3/sync:
          from: "/home/circleci/repo/tmp/latest/"
          to: 's3://${HIGHCHARTS_VISUAL_TESTS_BUCKET}/visualtests/reference/latest/' # delete existing latest references in S3 location
          overwrite: true
      - run:
          name: "Upload test results"
          command: "npx gulp dist-testresults --tag ${CIRCLE_TAG} --bucket ${HIGHCHARTS_VISUAL_TESTS_BUCKET}"
          when: always
      - <<: *persist_workspace

  reset_visual_references_job:
    <<: *defaults
    description: Reset reference images stored on S3 based. I.e recently added/changed samples will be treated as always being a part of this release.
    parameters:
      reset_tests:
        description: "Which tests to run?"
        type: string
        default: ""
    steps:
      - <<: *load_workspace
      - run: "npx gulp reset-visual-references --tests << parameters.reset_tests >> --reference --browsercount 2 --bucket ${HIGHCHARTS_STAGING_CODE_BUCKET}"

  visual_comparison_with_master:
    <<: *defaults
    description: Visual diff and compare PR with master
    steps:
      - <<: *add_gh_keys
      - <<: *add_to_ssh_config
      - <<: *add_gh_user_config
      - run: |
          if [ -z "$CIRCLE_PULL_REQUEST" ]; then
            echo "Not a PR according to CircleCI, so marking this step successful"
            circleci step halt
          fi
      - <<: *load_workspace
      - run: sudo apt-get install -y rsync
      - run: > # checkout master at diverge point of current branch and install
          git checkout master && git fetch origin master && git reset --hard origin/master &&
          git checkout $(git merge-base master ${CIRCLE_BRANCH}) && git log --oneline -5 &&
          npm i && npx gulp scripts
      - generate_references_command:
          browsercount: 2
      - run: git checkout ${CIRCLE_BRANCH}  && git log --oneline -5 && npm i && npx gulp scripts
      # we are forcing success on the below test runs to avoid failing the PR build
      - run: npx karma start test/karma-conf.js --tests highcharts/*/* --single-run --browsercount 2 --visualcompare || true
      - run: npx karma start test/karma-conf.js --tests stock/*/* --single-run --browsercount 2 --visualcompare || true
      - run: npx karma start test/karma-conf.js --tests maps/*/* --single-run --browsercount 2 --visualcompare || true
      - run: npx karma start test/karma-conf.js --tests gantt/*/* --single-run --browsercount 2 --visualcompare || true
      - run:
          name: Comment on PR and upload visual test images if any produced
          command: echo ${CIRCLE_PULL_REQUEST##*/} | xargs -I{} npx gulp update-pr-testresults --fail-silently --user circleci-mu --pr {}
          when: always
      - run:
          name: Save test results where both an reference.svg and candidate.svg exists
          command: |
            mkdir ../visual-test-results &&
            find samples -type d  -exec test -f '{}'/reference.svg -a -f '{}'/candidate.svg \; -print | xargs -I{} rsync -Rri --include="*/" --include="*.svg" --include="*.gif" --exclude="*" {} ../visual-test-results
          when: always
      - store_test_results:
          path: ../visual-test-results
      - store_artifacts:
          path: ../visual-test-results

  nightly_visual_diff:
    <<: *defaults
    description: Uploads visual test results to S3
    parameters:
      browsers:
        description: "Which browser to test?"
        type: string
        default: "ChromeHeadless"
    steps:
      - <<: *load_workspace
      - run:
          name: "Set application version env var"
          command: echo "export HIGHCHARTS_VERSION=$(node -p "require('./package.json').version")" >> $BASH_ENV
      - generate_references_command
      - aws-s3/sync: # overwrite with remote reference images before uploading any new ones
          from: "s3://${HIGHCHARTS_VISUAL_TESTS_BUCKET}/visualtests/reference/latest/"
          to: "samples/"
          arguments: |
            --exclude "*" \
            --include "*/reference.svg"
      - run:
          name: "Upload old and any new reference images"
          command: "npx gulp dist-testresults --tag ${HIGHCHARTS_VERSION} --bucket ${HIGHCHARTS_VISUAL_TESTS_BUCKET}"
      - run:
          # run tests in sequence due to all writing to the same file
          name: "Highcharts visual tests"
          command: >
            npx karma start test/karma-conf.js --tests highcharts/*/* --single-run
            --splitbrowsers << parameters.browsers >> --browsercount 1 --visualcompare --no-fail-on-empty-test-suite --no-fail-on-failing-test-suite
      - run:
          name: "Highmaps visual tests"
          command: >
            npx karma start test/karma-conf.js --tests maps/*/* --single-run
            --splitbrowsers << parameters.browsers >> --browsercount 1 --visualcompare --no-fail-on-empty-test-suite --no-fail-on-failing-test-suite
          when: always
      - run:
          name: "Highstock visual tests"
          command: >
            npx karma start test/karma-conf.js --tests stock/*/* --single-run
            --splitbrowsers << parameters.browsers >> --browsercount 1 --visualcompare --no-fail-on-empty-test-suite --no-fail-on-failing-test-suite
          when: always
      - run:
          name: "Gant visual tests"
          command: >
            npx karma start test/karma-conf.js --tests gantt/*/* --single-run
            --splitbrowsers << parameters.browsers >> --browsercount 1 --visualcompare --no-fail-on-empty-test-suite --no-fail-on-failing-test-suite
          when: always
      - run: "sudo apt-get install -y librsvg2-bin"
      - run:
          name: "Generate PNGs and diff"
          command: |
            find . -name reference.svg -print -execdir rsvg-convert -o reference.png {} \; &&
            find . -name candidate.svg -print -execdir rsvg-convert -o candidate.png {} \; &&
            find . -name reference.png -print -execdir npx pixelmatch candidate.png reference.png diff.png 0 \;
      - run:
          name: "Upload visual test candidates and diff assets"
          command: "npx gulp dist-testresults --bucket ${HIGHCHARTS_VISUAL_TESTS_BUCKET}"
          when: always

  build_dist:
    <<: *defaults
    steps:
      - <<: *load_workspace
      - run:
          name: Compile build
          command: npm run build -- --num-threads 2
      - <<: *persist_workspace

  deploy_code:
    <<: *defaults
    steps:
      - <<: *load_workspace
      - run:
          name: Upload code to S3
          command: npx gulp dist-upload-code --bucket ${HIGHCHARTS_S3_BUCKET}
      - slack/status:
          fail_only: true

  deploy_api_docs:
    <<: *defaults
    steps:
      - <<: *load_workspace
      - run:
          name: Generate api docs
          command: npx gulp jsdoc
      - run:
          name: Upload api docs to S3
          command: npx gulp upload-api --silent --noextensions
      - run: echo -e "API docs deployed to https://s3.eu-central-1.amazonaws.com/${HIGHCHARTS_APIDOCS_BUCKET}/highcharts/index.html"
      - slack/status:
          fail_only: true

  deploy_changelog:
    <<: *defaults
    parameters:
      add_build_metadata:
        type: boolean
        default: false
    steps:
      - <<: *load_workspace
      - <<: *add_gh_keys
      - <<: *add_to_ssh_config
      - run:
          name: install pre dependencies
          command: sudo apt-get install cpio
      - run:
          name: Generate changelog since last tag
          command: (git describe --abbrev=0 --tags | xargs -I{} node changelog/generate --pr <<# parameters.add_build_metadata >>--build-metadata<</ parameters.add_build_metadata >> --since {}) && node changelog/generate-html
      - run:
          name: Changelog - Create git-describe named folder and copy changelog
          command: git ls-files -m --others --exclude-standard | grep -i changelog | cpio -pdm "$(git describe)/"
      - run:
          name: Changelog - Upload changelog
          command: git ls-files -m --others --exclude-standard | grep -i changelog | tr '\n' ',' | sed 's/,$/\n/' | xargs npx gulp upload-files --bucket ${HIGHCHARTS_CHANGELOG_BUCKET} --files
      - run: echo -e "Changelog deployed to https://s3.eu-central-1.amazonaws.com/${HIGHCHARTS_CHANGELOG_BUCKET}/changelog/changelog.html"
      - slack/status:
          fail_only: true

  deploy_to_highcharts_dist:
    <<: *defaults
    steps:
      - <<: *load_workspace
      - <<: *add_gh_keys
      - <<: *add_to_ssh_config
      - <<: *add_gh_user_config
      - run:
          name: Clone highcharts-dist repository
          command: git clone -b master --single-branch git@github.com:highcharts/highcharts-dist.git --depth=1 /home/circleci/repo/highcharts-dist
      - run:
          name: Delete remote nightly branch
          command: cd ../highcharts-dist && git push origin --delete nightly || true
      - run:
          name: Run dist-release
          command: cd ../highcharts && npx gulp dist-release --force-yes
      - run:
          name: Push to highcharts-dist nightly branch
          command: |
            cd ../highcharts-dist
            git checkout -b nightly
            git add .
            git commit -m"Nightly build - ${CIRCLE_BUILD_NUM}"
            git push -u origin nightly
      - slack/status:
          fail_only: true
workflows:
  version: 2
  build_and_test:
    unless: << pipeline.parameters.run_reset_tests >>
    jobs:
      - checkout_and_install:
          filters:
            tags:
              only: /^v\d+(?:\.\d+)+?$/
          context: highcharts-common
      - lint:
          requires: [checkout_and_install]
          filters:
            tags:
              only: /^v\d+(?:\.\d+)+?$/
      - generate_ts_declarations:
          requires: [checkout_and_install]
          filters:
            tags:
              only: /^v\d+(?:\.\d+)+?$/
      - visual_comparison_with_master:
          requires: [lint]
          filters:
            branches:
              ignore: master
          context: highcharts-staging
      - generate_release_reference_images:
          requires: [lint]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(?:\.\d+)+?$/
          context: highcharts-staging
      - test_timezones:
          requires: [lint]
          filters:
            branches:
              only: [tools/ci-dist-release-yes]
          browsers: "Mac.Safari"
      - test_browsers:
          name: "verify-samples-Chrome"
          browsers: "ChromeHeadless --tests highcharts/*/*,maps/*/*,stock/*/*,gantt/*/*"
          browsercount: 2
          requires: [lint]
      - test_browsers:
          name: "test-Win.IE8"
          requires: [lint]
          browsers: "Win.IE8 --oldie"
      - test_browsers:
          name: "test-Mac.Safari"
          requires: ["test-Win.IE8", "generate_ts_declarations"]
          browsers: "Mac.Safari"
      - test_browsers:
          name: "test-Mac.Firefox"
          browsercount: 2
          requires: ["test-Mac.Safari"]
          browsers: "Mac.Firefox"
      - test_browsers:
          name: "test-Win.Chrome"
          browsercount: 2
          requires: ["test-Mac.Firefox"]
          browsers: "Win.Chrome"
      - check_for_docs_changes_and_deploy:
          requires: ["test-Mac.Firefox", "test-Win.Chrome"]
          filters:
            branches:
              only: [master]
          context: highcharts-prod
      - check_for_docs_changes_and_deploy:
          # need to add this release deploy job separately as it has different requires tag than master branch.
          requires: [generate_release_reference_images]
          always_deploy: true
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+(?:\.\d+)+?$/
          context: highcharts-prod

  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *" # 2 am every night
          filters:
            branches:
              only:
                - master
    jobs:
      - checkout_and_install:
          context: highcharts-common
      - nightly_visual_diff:
          name: "Test visual differences and distribute diff log to S3."
          requires: [checkout_and_install]
          context: highcharts-staging
      - test_timezones:
          requires: [checkout_and_install]
      - test_timezones:
          name: "timezone-Mac.Safari"
          requires: [checkout_and_install]
          browsers: "Mac.Safari"
      - test_timezones:
          name: "timezone-Mac.Firefox"
          requires: ["timezone-Mac.Safari"]
          browsers: "Mac.Firefox"
      - test_timezones:
          name: "timezone-Win.Chrome"
          requires: ["timezone-Mac.Firefox"]
          browsers: "Win.Chrome"
      - test_browsers:
          name: "test-Mac.Safari"
          requires: [checkout_and_install]
          browsers: "Mac.Safari"
          notify_on_failure: true
      - test_browsers:
          name: "test-Win.Chrome"
          browsercount: 2
          requires: ["test-Mac.Safari"]
          browsers: "Win.Chrome"
          notify_on_failure: true
      - test_browsers:
          name: "test-Mac.Firefox"
          browsercount: 2
          requires: ["test-Win.Chrome"]
          browsers: "Mac.Firefox"
          notify_on_failure: true
      - test_browsers:
          name: "test-Win.IE8"
          requires: ["test-Mac.Firefox"]
          browsers: "Win.IE8 --oldie"
          notify_on_failure: true
      - build_dist:
          requires: [checkout_and_install, "test-Win.IE8"]
      - deploy_code:
          requires: [build_dist]
          context: highcharts-staging
      - deploy_api_docs:
          requires: [build_dist]
          context: highcharts-staging
      - deploy_changelog:
          add_build_metadata: true
          requires: [build_dist]
          context: highcharts-staging
      - deploy_to_highcharts_dist:
          requires: [build_dist]
          context: highcharts-staging

  reset_visual_test_references:
    when: << pipeline.parameters.run_reset_tests >>
    jobs:
      - checkout_and_install:
          filters:
            branches:
              only: [master, tools/reset-visual-test]
      - reset_visual_references_job:
          requires: [checkout_and_install]
          reset_tests: << pipeline.parameters.reset_tests >>
