{
	"doclet": {
		"description": "Copyright (c) Highsoft AS. All rights reserved.",
		"kind": "global",
		"name": ""
	},
	"meta": {
		"branch": "tools/add-namespace-tree",
		"commit": "59066e5d6",
		"date": "Wed Sep 26 2018 13:49:33 GMT+0200 (CEST)",
		"files": [
			{
				"path": "code/highcharts.src.js",
				"line": 0
			}
		],
		"version": "6.1.4"
	},
	"children": [
		{
			"doclet": {
				"name": "Highcharts",
				"description": "The Highcharts object is the placeholder for all other members, and various utility functions. The most important member of the namespace would be the chart constructor.",
				"kind": "namespace",
				"isGlobal": true
			},
			"children": [
				{
					"doclet": {
						"name": "Highcharts.charts",
						"description": "An array containing the current chart objects in the page. A chart's position in the array is preserved throughout the page's lifetime. When a chart is destroyed, the array item becomes `undefined`.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Array.<Highcharts.Chart>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 71
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AnimationOptionsObject",
						"description": "An animation configuration. Animation configurations can also be defined as booleans, where `false` turns off animation and `true` defaults to a duration of 500ms.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 100
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AnimationOptionsObject.duration",
								"description": "The animation duration in milliseconds.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 100
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnimationOptionsObject.easing",
								"description": "The name of an easing function as defined on the `Math` object.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 100
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnimationOptionsObject.complete",
								"description": "A callback function to exectute when the animation finishes.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 100
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnimationOptionsObject.step",
								"description": "A callback function to execute on each step of each attribute or CSS property that's being animated. The first argument contains information about the animation and progress.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 100
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.CSSObject",
						"description": "A style object with camel case property names to define visual appearance of a SVG element or HTML element. The properties can be whatever styles are supported on the given SVG or HTML element.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 122
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.CSSObject.[key:string]",
								"description": "",
								"kind": "member",
								"types": [
									"boolean",
									"number",
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.background",
								"description": "Background style for the element.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.backgroundColor",
								"description": "Background color of the element.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"Highcharts.ColorString"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.border",
								"description": "Border style for the element.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.borderRadius",
								"description": "Radius of the element border.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.color",
								"description": "Color used in the element. The \"contrast\" option is a Highcharts custom property that results in black or white, depending on the background of the element.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"\"contrast\"",
									"Highcharts.ColorString"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.cursor",
								"description": "Style of the mouse cursor when resting over the element.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.fontFamily",
								"description": "Font family of the element text. Multiple values have to be in decreasing preference order and separated by comma.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.fontSize",
								"description": "Font size of the element text.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.fontWeight",
								"description": "Font weight of the element text.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.height",
								"description": "Height of the element.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.lineWidth",
								"description": "Width of the element border.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.opacity",
								"description": "Opacity of the element.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.padding",
								"description": "Space around the element content.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.pointerEvents",
								"description": "Behaviour of the element when the mouse cursor rests over it.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.position",
								"description": "Positioning of the element.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.textAlign",
								"description": "Alignment of the element text.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.textOutline",
								"description": "Outline style of the element text.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.textDecoration",
								"description": "Additional decoration of the element text.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.textOverflow",
								"description": "Line break style of the element text. Highcharts SVG elements support `ellipsis` when a `width` is set.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.transition",
								"description": "Animated transition of selected element properties.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.top",
								"description": "Top spacing of the element relative to the parent element.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.whiteSpace",
								"description": "Line break style of the element text.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.width",
								"description": "Width of the element.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 122
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Dictionary<T>",
						"description": "Generic dictionary in TypeScript notation.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 211
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Dictionary<T>.[key:string]",
								"description": "",
								"kind": "member",
								"types": [
									"T"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 211
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.HTMLAttributes",
						"description": "An object of key-value pairs for HTML attributes.",
						"kind": "typedef",
						"types": [
							"Highcharts.Dictionary.<(boolean|number|string)>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 219
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.EachCallbackFunction<T>",
						"description": "The iterator callback.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"item": {
								"description": "The array item.",
								"types": [
									"T"
								]
							},
							"index": {
								"description": "The item's index in the array.",
								"types": [
									"number"
								]
							},
							"arr": {
								"description": "The array that each is being applied to.",
								"types": [
									"Array.<T>"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 225
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.EventCallbackFunction",
						"description": "The function callback to execute when the event is fired. The `this` context contains the instance, that fired the event.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"eventArguments": {
								"description": "Event arguments.",
								"isOptional": true,
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 240
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.FormatterCallbackFunction",
						"description": "Formats data as a string. Usually the data is accessible throught the `this` keyword.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"return": {
							"types": [
								"string"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 250
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.HTMLDOMElement",
						"description": "An HTML DOM element. The type is a reference to the regular SVGElement in the global scope.",
						"kind": "typedef",
						"see": [
							"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"
						],
						"types": [
							"global.HTMLElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 259
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ObjectEachCallbackFunction",
						"description": "The iterator callback.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"value": {
								"description": "The property value.",
								"types": [
									"*"
								]
							},
							"key": {
								"description": "The property key.",
								"types": [
									"string"
								]
							},
							"obj": {
								"description": "The object that objectEach is being applied to.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 268
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.OffsetObject",
						"description": "An object containing `left` and `top` properties for the position in the page.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 283
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.OffsetObject.left",
								"description": "Left distance to the page border.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 283
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.OffsetObject.top",
								"description": "Top distance to the page border.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 283
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PositionObject",
						"description": "An object containing `x` and `y` properties for the position of an element.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 296
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PositionObject.x",
								"description": "X position of the element.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 296
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PositionObject.y",
								"description": "Y position of the element.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 296
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.RelativeSize",
						"description": "If a number is given, it defines the pixel length. If a percentage string is given, like for example `'50%'`, the setting defines a length relative to a base size, for example the size of a container.",
						"kind": "typedef",
						"types": [
							"number",
							"string"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 308
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SVGAttributes",
						"description": "An object of key-value pairs for SVG attributes. Attributes in Highcharts elements for the most parts correspond to SVG, but some are specific to Highcharts, like `zIndex`, `rotation`, `rotationOriginX`, `rotationOriginY`, `translateX`, `translateY`, `scaleX` and `scaleY`. SVG attributes containing a hyphen are _not_ camel-cased, they should be quoted to preserve the hyphen.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 316
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.[key:string]",
								"description": "",
								"kind": "member",
								"types": [
									"boolean",
									"number",
									"string",
									"Array.<any>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.d",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string",
									"Highcharts.SVGPathArray"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.inverted",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.matrix",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"Array.<number>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.stroke",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"Highcharts.ColorString"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.rotation",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.rotationOriginX",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.rotationOriginY",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.scaleX",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.scaleY",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.translateX",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.translateY",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 316
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.zIndex",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 316
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SVGDOMElement",
						"description": "An SVG DOM element. The type is a reference to the regular SVGElement in the global scope.",
						"kind": "typedef",
						"see": [
							"https://developer.mozilla.org/en-US/docs/Web/API/SVGElement"
						],
						"types": [
							"global.GlobalSVGElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 361
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SVGPathArray",
						"description": "Array of path commands, that will go into the `d` attribute of an SVG element.",
						"kind": "typedef",
						"types": [
							"Array.<(number|Highcharts.SVGPathCommand)>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 370
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SVGPathCommand",
						"description": "Possible path commands in a SVG path array.",
						"kind": "typedef",
						"values": "[\"a\",\"c\",\"h\",\"l\",\"m\",\"q\",\"s\",\"t\",\"v\",\"z\",\"A\",\"C\",\"H\",\"L\",\"M\",\"Q\",\"S\",\"T\",\"V\",\"Z\"]",
						"types": [
							"string"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 377
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.error",
						"description": "Provide error messages for debugging, with links to online explanation. This function can be overridden to provide custom error handling.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"code": {
								"description": "The error code. See\n       [errors.xml]{@link https://github.com/highcharts/highcharts/blob/master/errors/errors.xml}\n       for available codes. If it is a string, the error message is printed\n       directly in the console.",
								"types": [
									"number",
									"string"
								]
							},
							"stop": {
								"description": "Whether to throw an error or just log a warning in the console.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 403
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.merge",
						"description": "Utility function to deep merge two or more objects and return a third object. The merge function can also be used with a single object argument to create a deep copy of an object.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"a": {
								"description": "The first object to extend. When only this is given, the function\n       returns a deep copy.",
								"types": [
									"*"
								]
							},
							"n": {
								"description": "An object to merge into the previous one.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "The merged object. If the first argument is true, the return is the\n        same as the second argument."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 840
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.merge",
						"description": "Utility function to deep merge two or more objects and return a third object. If the first argument is true, the contents of the second object is copied into the first object. The merge function can also be used with a single object argument to create a deep copy of an object.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"extend": {
								"description": "Whether to extend the left-side object (a) or return a whole new\n       object.",
								"types": [
									"boolean"
								]
							},
							"a": {
								"description": "The first object to extend. When only this is given, the function\n       returns a deep copy.",
								"types": [
									"*"
								]
							},
							"n": {
								"description": "An object to merge into the previous one.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "The merged object. If the first argument is true, the return is the\n        same as the second argument."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 840
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isString",
						"description": "Utility function to check for string type.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"s": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is a string."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 942
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isArray",
						"description": "Utility function to check if an item is an array.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is an array."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 957
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isObject",
						"description": "Utility function to check if an item is of type object.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							},
							"strict": {
								"description": "Also checks that the object is not an array.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is an object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 973
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isDOMElement",
						"description": "Utility function to check if an Object is a HTML Element.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is a HTML Element."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 991
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isClass",
						"description": "Utility function to check if an Object is an class.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is an class."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1006
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isNumber",
						"description": "Utility function to check if an item is a number and it is finite (not NaN, Infinity or -Infinity).",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"n": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the item is a finite number"
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1026
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.erase",
						"description": "Remove the last occurence of an item from an array.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array.",
								"types": [
									"Array"
								]
							},
							"item": {
								"description": "The item to remove.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1042
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.defined",
						"description": "Check if an object is null or undefined.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "False if the object is null or undefined, otherwise true."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1063
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.attr",
						"description": "Set or get an attribute or an object of attributes. To use as a setter, pass a key and a value, or let the second argument be a collection of keys and values. To use as a getter, pass only a string as the second argument.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"elem": {
								"description": "The DOM element to receive the attribute(s).",
								"types": [
									"Highcharts.HTMLDOMElement",
									"Highcharts.SVGDOMElement"
								]
							},
							"prop": {
								"description": "The property or an object of key-value pairs.",
								"isOptional": true,
								"types": [
									"string",
									"Highcharts.HTMLAttributes",
									"Highcharts.SVGAttributes"
								]
							},
							"value": {
								"description": "The value if a single property is set.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "When used as a getter, return the value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1078
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.splat",
						"description": "Check if an element is an array, and if not, make it into an array.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object to splat.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"Array"
							],
							"description": "The produced or original array."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1125
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.syncTimeout",
						"description": "Set a timeout if the delay is given, otherwise perform the function synchronously.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"fn": {
								"description": "The function callback.",
								"types": [
									"function"
								]
							},
							"delay": {
								"description": "Delay in milliseconds.",
								"types": [
									"number"
								]
							},
							"context": {
								"description": "The context.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "An identifier for the timeout that can later be cleared with\n        Highcharts.clearTimeout."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1140
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.clearTimeout",
						"description": "Internal clear timeout. The function checks that the `id` was not removed (e.g. by `chart.destroy()`). For the details see [issue #7901](https://github.com/highcharts/highcharts/issues/7901).",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"id": {
								"description": "Id of a timeout.",
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1166
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.extend",
						"description": "Utility function to extend an object with the members of another.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"a": {
								"description": "The object to be extended.",
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							},
							"b": {
								"description": "The object to add to the first one.",
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Dictionary.<*>"
							],
							"description": "Object a, the original object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1182
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.pick",
						"description": "Return the first value that is not null or undefined.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"items": {
								"description": "Variable number of arguments to inspect.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "The value of the first argument that is not null or undefined."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1208
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.css",
						"description": "Set CSS on a given element.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "An HTML DOM element.",
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							},
							"styles": {
								"description": "Style object with camel case property names.",
								"types": [
									"Highcharts.CSSObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1232
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.createElement",
						"description": "Utility function to create an HTML element with attributes and styles.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"tag": {
								"description": "The HTML tag.",
								"types": [
									"string"
								]
							},
							"attribs": {
								"description": "Attributes as an object of key-value pairs.",
								"isOptional": true,
								"types": [
									"Highcharts.HTMLAttributes"
								]
							},
							"styles": {
								"description": "Styles as an object of key-value pairs.",
								"isOptional": true,
								"types": [
									"Highcharts.CSSObject"
								]
							},
							"parent": {
								"description": "The parent HTML object.",
								"isOptional": true,
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							},
							"nopad": {
								"description": "If true, remove all padding, border and margin.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.HTMLDOMElement"
							],
							"description": "The created DOM element."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1252
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.extendClass",
						"description": "Extend a prototyped class by new members.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"parent": {
								"description": "The parent prototype to inherit.",
								"types": [
									"*"
								]
							},
							"members": {
								"description": "A collection of prototype members to add or override compared to the\n       parent prototype.",
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "A new prototype."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1293
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.pad",
						"description": "Left-pad a string to a given length by adding a character repetetively.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"number": {
								"description": "The input string or number.",
								"types": [
									"number"
								]
							},
							"length": {
								"description": "The desired string length.",
								"types": [
									"number"
								]
							},
							"padder": {
								"description": "The character to pad with.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The padded string."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1315
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.relativeLength",
						"description": "Return a length based on either the integer value, or a percentage of a base.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"value": {
								"description": "A percentage string or a number.",
								"types": [
									"Highcharts.RelativeSize"
								]
							},
							"base": {
								"description": "The full length that represents 100%.",
								"types": [
									"number"
								]
							},
							"offset": {
								"description": "A pixel offset to apply for percentage values. Used internally in\n       axis positioning.",
								"isOptional": true,
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The computed length."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1342
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.wrap",
						"description": "Wrap a method with extended functionality, preserving the original function.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The context object that the method belongs to. In real cases, this is\n       often a prototype.",
								"types": [
									"*"
								]
							},
							"method": {
								"description": "The name of the method to extend.",
								"types": [
									"string"
								]
							},
							"func": {
								"description": "A wrapper function callback. This function is called with the same\n       arguments as the original function, except that the original function\n       is unshifted and passed as the first argument.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1366
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.formatSingle",
						"description": "Format a single variable. Similar to sprintf, without the % prefix.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"format": {
								"description": "The format string.",
								"types": [
									"string"
								]
							},
							"val": {
								"description": "The value.",
								"types": [
									"*"
								]
							},
							"time": {
								"description": "A `Time` instance that determines the date formatting, for example\n       for applying time zone corrections to the formatted date.",
								"isOptional": true,
								"types": [
									"Highcharts.Time"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted representation of the value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1402
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.format",
						"description": "Format a string according to a subset of the rules of Python's String.format method.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"str": {
								"description": "The string to format.",
								"types": [
									"string"
								]
							},
							"ctx": {
								"description": "The context, a collection of key-value pairs where each key is\n       replaced by its value.",
								"types": [
									"*"
								]
							},
							"time": {
								"description": "A `Time` instance that determines the date formatting, for example\n       for applying time zone corrections to the formatted date.",
								"isOptional": true,
								"types": [
									"Highcharts.Time"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted string."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1446
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getMagnitude",
						"description": "Get the magnitude of a number.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"number": {
								"description": "The number.",
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2 etc."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1526
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.normalizeTickInterval",
						"description": "Take an interval and normalize it to multiples of round numbers.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"interval": {
								"description": "The raw, un-rounded interval.",
								"types": [
									"number"
								]
							},
							"multiples": {
								"description": "Allowed multiples.",
								"isOptional": true,
								"types": [
									"Array"
								]
							},
							"magnitude": {
								"description": "The magnitude of the number.",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"allowDecimals": {
								"description": "Whether to allow decimals.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							},
							"hasTickAmount": {
								"description": "If it has tickAmount, avoid landing on tick intervals lower than\n       original.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The normalized interval."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1541
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.stableSort",
						"description": "Sort an object array and keep the order of equal items. The ECMAScript standard does not specify the behaviour when items are equal.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to sort.",
								"types": [
									"Array"
								]
							},
							"sortFunction": {
								"description": "The function to sort it with, like with regular Array.prototype.sort.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1638
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.arrayMin",
						"description": "Non-recursive method to find the lowest member of an array. `Math.min` raises a maximum call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This method is slightly slower, but safe.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"data": {
								"description": "An array of numbers.",
								"types": [
									"Array"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The lowest number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1671
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.arrayMax",
						"description": "Non-recursive method to find the lowest member of an array. `Math.max` raises a maximum call stack size exceeded error in Chrome when trying to apply more than 150.000 points. This method is slightly slower, but safe.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"data": {
								"description": "An array of numbers.",
								"types": [
									"Array"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The highest number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1696
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.destroyObjectProperties",
						"description": "Utility method that destroys any SVGElement instances that are properties on the given object. It loops all properties and invokes destroy if there is a destroy method. The property is then delete.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object to destroy properties on.",
								"types": [
									"*"
								]
							},
							"except": {
								"description": "Exception, do not destroy this property, only delete it.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1721
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.discardElement",
						"description": "Discard a HTML element by moving it to the bin and delete.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"element": {
								"description": "The HTML node to discard.",
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1748
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.correctFloat",
						"description": "Fix JS round off float errors.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"num": {
								"description": "A float number to fix.",
								"types": [
									"number"
								]
							},
							"prec": {
								"description": "The precision.",
								"isOptional": true,
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The corrected float number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1770
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.setAnimation",
						"description": "Set the global animation to either a given value, or fall back to the given chart's animation option.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"animation": {
								"description": "The animation object.",
								"types": [
									"boolean",
									"Highcharts.AnimationOptionsObject"
								]
							},
							"chart": {
								"description": "The chart instance.",
								"types": [
									"Highcharts.Chart"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1790
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.animObject",
						"description": "Get the animation in object form, where a disabled animation is always returned as `{ duration: 0 }`.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"animation": {
								"description": "An animation setting. Can be an object with duration, complete and\n       easing properties, or a boolean to enable or disable.",
								"types": [
									"boolean",
									"Highcharts.AnimationOptionsObject"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.AnimationOptionsObject"
							],
							"description": "An object with at least a duration property."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1814
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.numberFormat",
						"description": "Format a number and return a string based on input settings.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"number": {
								"description": "The input number to format.",
								"types": [
									"number"
								]
							},
							"decimals": {
								"description": "The amount of decimals. A value of -1 preserves the amount in the\n       input number.",
								"types": [
									"number"
								]
							},
							"decimalPoint": {
								"description": "The decimal point, defaults to the one given in the lang options, or\n       a dot.",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"thousandsSep": {
								"description": "The thousands separator, defaults to the one given in the lang\n       options, or a space character.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1849
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getStyle",
						"description": "Get the computed CSS value for given element and property, only for numerical properties. For width and height, the dimension of the inner box (excluding padding) is returned. Used for fitting the chart within the container.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "An HTML element.",
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							},
							"prop": {
								"description": "The property name.",
								"types": [
									"string"
								]
							},
							"toInt": {
								"description": "Parse to integer.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The numeric value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1974
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.inArray",
						"description": "Search for an item in an array.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"item": {
								"description": "The item to search for.",
								"types": [
									"*"
								]
							},
							"arr": {
								"description": "The array or node collection to search in.",
								"types": [
									"Array"
								]
							},
							"fromIndex": {
								"description": "The index to start searching from.",
								"isOptional": true,
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The index within the array, or -1 if not found."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2030
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.grep",
						"description": "Filter an array by a callback.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to filter.",
								"types": [
									"Array"
								]
							},
							"callback": {
								"description": "The callback function. The function receives the item as the first\n       argument. Return `true` if the item is to be preserved.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"Array"
							],
							"description": "A new, filtered array."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2054
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.find",
						"description": "Return the value of the first element in the array that satisfies the provided testing function.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to test.",
								"types": [
									"Array"
								]
							},
							"callback": {
								"description": "The callback function. The function receives the item as the first\n       argument. Return `true` if this item satisfies the condition.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "The value of the element."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2073
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.some",
						"description": "Test whether at least one element in the array passes the test implemented by the provided function.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to test",
								"types": [
									"Array"
								]
							},
							"fn": {
								"description": "The function to run on each item. Return truty to pass the test.\n       Receives arguments `currentValue`, `index` and `array`.",
								"types": [
									"function"
								]
							},
							"ctx": {
								"description": "The context.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2105
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.map",
						"description": "Map an array by a callback.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to map.",
								"types": [
									"Array"
								]
							},
							"fn": {
								"description": "The callback function. Return the new value for the new array.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"Array"
							],
							"description": "A new array item with modified items."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2127
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.keys",
						"description": "Returns an array of a given object's own properties.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object of which the properties are to be returned.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"Array.<string>"
							],
							"description": "An array of strings that represents all the properties."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2153
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.reduce",
						"description": "Reduce an array to a single value.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to reduce.",
								"types": [
									"Array.<*>"
								]
							},
							"fn": {
								"description": "The callback function. Return the reduced value. Receives 4\n       arguments: Accumulated/reduced value, current value, current array\n       index, and the array.",
								"types": [
									"function"
								]
							},
							"initialValue": {
								"description": "The initial value of the accumulator.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "The reduced value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2168
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.offset",
						"description": "Get the element's offset position, corrected for `overflow: auto`.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The HTML element.",
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.OffsetObject"
							],
							"description": "An object containing `left` and `top` properties for the position in\n        the page."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2195
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.stop",
						"description": "Stop running animation.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The SVGElement to stop animation on.",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"prop": {
								"description": "The property to stop animating. If given, the stop method will stop a\n       single property from animating, while others continue.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2221
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.each<T>",
						"description": "Iterate over an array.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to iterate over.",
								"types": [
									"Array.<T>"
								]
							},
							"fn": {
								"description": "The iterator callback. It passes three arguments:\n       * item - The array item.\n       * index - The item's index in the array.\n       * arr - The array that each is being applied to.",
								"types": [
									"Highcharts.EachCallbackFunction.<T>"
								]
							},
							"ctx": {
								"description": "The context.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2252
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.objectEach",
						"description": "Iterate over object key pairs in an object.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object to iterate over.",
								"types": [
									"*"
								]
							},
							"fn": {
								"description": "The iterator callback. It passes three arguments:\n       * value - The property value.\n       * key - The property key.\n       * obj - The object that objectEach is being applied to.",
								"types": [
									"Highcharts.ObjectEachCallbackFunction"
								]
							},
							"ctx": {
								"description": "The context.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2273
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.addEvent",
						"description": "Add an event listener.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The element or object to add a listener to. It can be a\n       {@link HTMLDOMElement}, an {@link SVGElement} or any other object.",
								"types": [
									"*"
								]
							},
							"type": {
								"description": "The event type.",
								"types": [
									"string"
								]
							},
							"fn": {
								"description": "The function callback to execute when the event is fired.",
								"types": [
									"Highcharts.EventCallbackFunction"
								]
							},
							"options": {
								"description": "Event options",
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							},
							"options.order": {
								"description": "The order the event handler should be called. This opens for having\n       one handler be called before another, independent of in which order\n       they were added.",
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"function"
							],
							"description": "A callback function to remove the added event."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2298
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.removeEvent",
						"description": "Remove an event that was added with {@link Highcharts#addEvent}.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The element to remove events on.",
								"types": [
									"*"
								]
							},
							"type": {
								"description": "The type of events to remove. If undefined, all events are removed\n       from the element.",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"fn": {
								"description": "The specific callback to remove. If undefined, all events that match\n       the element and optionally the type are removed.",
								"isOptional": true,
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2369
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.fireEvent",
						"description": "Fire an event that was registered with {@link Highcharts#addEvent}.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The object to fire the event on. It can be a {@link HTMLDOMElement},\n       an {@link SVGElement} or any other object.",
								"types": [
									"*"
								]
							},
							"type": {
								"description": "The type of event.",
								"types": [
									"string"
								]
							},
							"eventArguments": {
								"description": "Custom event arguments that are passed on as an argument to the event\n       handler.",
								"isOptional": true,
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							},
							"defaultFunction": {
								"description": "The default function to execute if the other listeners haven't\n       returned false.",
								"isOptional": true,
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2449
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.animate",
						"description": "The global animate method, which uses Fx to create individual animators.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The element to animate.",
								"types": [
									"Highcharts.HTMLDOMElement",
									"Highcharts.SVGElement"
								]
							},
							"params": {
								"description": "An object containing key-value pairs of the properties to animate.\n       Supports numeric as pixel-based CSS properties for HTML objects and\n       attributes for SVGElements.",
								"types": [
									"Highcharts.HTMLAttributes",
									"Highcharts.SVGAttributes"
								]
							},
							"opt": {
								"description": "Animation options.",
								"isOptional": true,
								"types": [
									"Highcharts.AnimationOptionsObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2537
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.seriesType",
						"description": "Factory to create new series prototypes.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"type": {
								"description": "The series type name.",
								"types": [
									"string"
								]
							},
							"parent": {
								"description": "The parent series type name. Use `line` to inherit from the basic\n       {@link Series} object.",
								"types": [
									"string"
								]
							},
							"options": {
								"description": "The additional default options that is merged with the parent's\n       options.",
								"types": [
									"*"
								]
							},
							"props": {
								"description": "The properties (functions and primitives) to set on the new\n       prototype.",
								"types": [
									"*"
								]
							},
							"pointProps": {
								"description": "Members for a series-specific extension of the {@link Point}\n       prototype if needed.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Series"
							],
							"description": "The newly created prototype as extended from {@link Series} or its\n        derivatives."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2611
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.uniqueKey",
						"description": "Get a unique key for using in internal element id's and pointers. The key is composed of a random hash specific to this Highcharts instance, and a counter.",
						"kind": "function",
						"isStatic": true,
						"return": {
							"types": [
								"string"
							],
							"description": "A unique key."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2664
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ColorString",
						"description": "A valid color to be parsed and handled by Highcharts. Highcharts internally supports hex colors like `#ffffff`, rgb colors like `rgb(255,255,255)` and rgba colors like `rgba(255,255,255,1)`. Other colors may be supported by the browsers and displayed correctly, but Highcharts is not able to process them and apply concepts like opacity and brightening.",
						"kind": "typedef",
						"types": [
							"string"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2746
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AlignObject",
						"description": "Options to align the element relative to the chart or another box.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3049
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AlignObject.align",
								"description": "Horizontal alignment. Can be one of `left`, `center` and `right`.",
								"kind": "member",
								"isOptional": true,
								"defaultValue": "'left'",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3049
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AlignObject.verticalAlign",
								"description": "Vertical alignment. Can be one of `top`, `middle` and `bottom`.",
								"kind": "member",
								"isOptional": true,
								"defaultValue": "'top'",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3049
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AlignObject.x",
								"description": "Horizontal pixel offset from alignment.",
								"kind": "member",
								"isOptional": true,
								"defaultValue": 0,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3049
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AlignObject.y",
								"description": "Vertical pixel offset from alignment.",
								"kind": "member",
								"isOptional": true,
								"defaultValue": 0,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3049
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AlignObject.alignByTranslate",
								"description": "Use the `transform` attribute with translateX and translateY custom attributes to align this elements rather than `x` and `y` attributes.",
								"kind": "member",
								"isOptional": true,
								"defaultValue": false,
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3049
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.BBoxObject",
						"description": "Bounding box of an element.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3073
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.BBoxObject.height",
								"description": "Height of the bounding box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3073
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.BBoxObject.width",
								"description": "Width of the bounding box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3073
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.BBoxObject.x",
								"description": "Horizontal position of the bounding box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3073
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.BBoxObject.y",
								"description": "Vertical position of the bounding box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3073
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ClipRectElement",
						"description": "A clipping rectangle that can be applied to one or more {@link SVGElement} instances. It is instanciated with the {@link SVGRenderer#clipRect} function and applied with the {@link SVGElement#clip} function.",
						"kind": "typedef",
						"types": [
							"Highcharts.SVGElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3091
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.FontMetricsObject",
						"description": "The font metrics.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3109
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.FontMetricsObject.b",
								"description": "The baseline relative to the top of the box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3109
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.FontMetricsObject.h",
								"description": "The line height.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3109
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.FontMetricsObject.f",
								"description": "The font size.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3109
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.RectangleObject",
						"description": "A rectangle.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3194
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.RectangleObject.height",
								"description": "Height of the rectangle.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3194
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RectangleObject.width",
								"description": "Width of the rectangle.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3194
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RectangleObject.x",
								"description": "Horizontal position of the rectangle.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3194
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RectangleObject.y",
								"description": "Vertical position of the rectangle.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3194
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ShadowOptionsObject",
						"description": "The shadow options.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3212
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.color",
								"description": "The shadow color.",
								"kind": "member",
								"isOptional": true,
								"defaultValue": "#000000",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3212
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.offsetX",
								"description": "The horizontal offset from the element.",
								"kind": "member",
								"isOptional": true,
								"defaultValue": 1,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3212
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.offsetY",
								"description": "The vertical offset from the element.",
								"kind": "member",
								"isOptional": true,
								"defaultValue": 1,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3212
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.opacity",
								"description": "The shadow opacity.",
								"kind": "member",
								"isOptional": true,
								"defaultValue": 0.15,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3212
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.width",
								"description": "The shadow width or distance from the element.",
								"kind": "member",
								"isOptional": true,
								"defaultValue": 3,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3212
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SVGDefinitionObject",
						"description": "Serialized form of an SVG definition, including children. Some key property names are reserved: tagName, textContent, and children.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3233
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SVGDefinitionObject.[key:string]",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"string",
									"Array.<Highcharts.SVGDefinitionObject>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3233
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGDefinitionObject.children",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"Array.<Highcharts.SVGDefinitionObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3233
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGDefinitionObject.tagName",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3233
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGDefinitionObject.textContent",
								"description": "",
								"kind": "member",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3233
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SymbolDictionary",
						"description": "An extendable collection of functions for defining symbol paths.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3248
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SymbolDictionary.[key:Highcharts.SymbolKey]",
								"description": "",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3248
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SymbolKey",
						"description": "Can be one of `arc`, `callout`, `circle`, `diamond`, `square`, `triangle`, `triangle-down`. Symbols are used internally for point markers, button and label borders and backgrounds, or custom shapes. Extendable by adding to {@link SVGRenderer#symbols}.",
						"kind": "typedef",
						"values": "[\"arc\", \"callout\", \"circle\", \"diamond\", \"square\", \"triangle\",\n            \"triangle-down\"]",
						"types": [
							"string"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3256
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SymbolOptionsObject",
						"description": "Additional options, depending on the actual symbol drawn.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3268
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.anchorX",
								"description": "The anchor X position for the `callout` symbol. This is where the chevron points to.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3268
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.anchorY",
								"description": "The anchor Y position for the `callout` symbol. This is where the chevron points to.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3268
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.end",
								"description": "The end angle of an `arc` symbol.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3268
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.open",
								"description": "Whether to draw `arc` symbol open or closed.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3268
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.r",
								"description": "The radius of an `arc` symbol, or the border radius for the `callout` symbol.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3268
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.start",
								"description": "The start angle of an `arc` symbol.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3268
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SVGElement",
						"description": "The SVGElement prototype is a JavaScript wrapper for SVG elements used in the rendering layer of Highcharts. Combined with the {@link Highcharts.SVGRenderer} object, these prototypes allow freeform annotation in the charts or even in HTML pages without instanciating a chart. The SVGElement can also wrap HTML labels, when `text` or `label` elements are created with the `useHTML` parameter. The SVGElement instances are created through factory functions on the {@link Highcharts.SVGRenderer} object, like [rect]{@link Highcharts.SVGRenderer#rect}, [path]{@link Highcharts.SVGRenderer#path}, [text]{@link Highcharts.SVGRenderer#text}, [label]{@link Highcharts.SVGRenderer#label}, [g]{@link Highcharts.SVGRenderer#g} and more.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3336
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SVGElement.init",
								"description": "Initialize the SVG element. This function only exists to make the initiation process overridable. It should not be called directly.",
								"kind": "function",
								"parameters": {
									"renderer": {
										"description": "The SVGRenderer instance to initialize to.",
										"types": [
											"Highcharts.SVGRenderer"
										]
									},
									"nodeName": {
										"description": "The SVG node name.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3374
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.element",
								"description": "The primary DOM node. Each `SVGElement` instance wraps a main DOM node, but may also represent more nodes.",
								"kind": "member",
								"types": [
									"Highcharts.SVGDOMElement",
									"Highcharts.HTMLDOMElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3388
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.renderer",
								"description": "The renderer that the SVGElement belongs to.",
								"kind": "member",
								"types": [
									"Highcharts.SVGRenderer"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3399
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.animate",
								"description": "Animate to given attributes or CSS properties.",
								"kind": "function",
								"parameters": {
									"params": {
										"description": "SVG attributes or CSS to animate.",
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"options": {
										"description": "Animation options.",
										"isOptional": true,
										"types": [
											"Highcharts.AnimationOptionsObject"
										]
									},
									"complete": {
										"description": "Function to perform at the end of animation.",
										"isOptional": true,
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3408
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.attr",
								"description": "Apply native and custom attributes to the SVG elements. In order to set the rotation center for rotation, set x and y to 0 and use `translateX` and `translateY` attributes to position the element instead. Attributes frequently used in Highcharts are `fill`, `stroke`, `stroke-width`.",
								"kind": "function",
								"parameters": {
									"hash": {
										"description": "The native and custom SVG attributes.",
										"isOptional": true,
										"types": [
											"string",
											"Highcharts.SVGAttributes"
										]
									},
									"val": {
										"description": "If the type of the first argument is `string`, the second can be a\n       value, which will serve as a single attribute setter. If the first\n       argument is a string and the second is undefined, the function\n       serves as a getter and the current value of the property is\n       returned.",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"complete": {
										"description": "A callback function to execute after setting the attributes. This\n       makes the function compliant and interchangeable with the\n       {@link SVGElement#animate} function.",
										"isOptional": true,
										"types": [
											"function"
										]
									},
									"continueAnimation": {
										"description": "Used internally when `.attr` is called as part of an animation\n       step. Otherwise, calling `.attr` for an attribute will stop\n       animation for that attribute.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"number",
										"string",
										"Highcharts.SVGElement"
									],
									"description": "If used as a setter, it returns the current\n        {@link Highcharts.SVGElement} so the calls can be chained. If\n        used as a getter, the current value of the attribute is returned."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3696
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.addClass",
								"description": "Add a class name to an element.",
								"kind": "function",
								"parameters": {
									"className": {
										"description": "The new class name to add.",
										"types": [
											"string"
										]
									},
									"replace": {
										"description": "When true, the existing class name(s) will be overwritten with\n       the new one. When false, the new one is added.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Return the SVG element for chainability."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3882
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.hasClass",
								"description": "Check if an element has the given class name.",
								"kind": "function",
								"parameters": {
									"className": {
										"description": "The class name to check for.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"boolean"
									],
									"description": "Whether the class name is found."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3911
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.removeClass",
								"description": "Remove a class name from the element.",
								"kind": "function",
								"parameters": {
									"className": {
										"description": "The class name to remove.",
										"types": [
											"string",
											"RegExp"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVG element for chainability."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3929
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.clip",
								"description": "Apply a clipping rectangle to this element.",
								"kind": "function",
								"parameters": {
									"clipRect": {
										"description": "The clipping rectangle. If skipped, the current clip is removed.",
										"isOptional": true,
										"types": [
											"Highcharts.ClipRectElement"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVG element to allow chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3986
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.crisp",
								"description": "Calculate the coordinates needed for drawing a rectangle crisply and return the calculated attributes.",
								"kind": "function",
								"parameters": {
									"rect": {
										"description": "Rectangle to crisp.",
										"types": [
											"Highcharts.RectangleObject"
										]
									},
									"strokeWidth": {
										"description": "The stroke width to consider when computing crisp positioning. It\n       can also be set directly on the rect parameter.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.RectangleObject"
									],
									"description": "The modified rectangle arguments."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4006
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.css",
								"description": "Set styles for the element. In addition to CSS styles supported by native SVG and HTML elements, there are also some custom made for Highcharts, like `width`, `ellipsis` and `textOverflow` for SVG text elements.",
								"kind": "function",
								"parameters": {
									"styles": {
										"description": "The new CSS styles.",
										"types": [
											"Highcharts.CSSObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Return the SVG element for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4046
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.on",
								"description": "Add an event listener. This is a simple setter that replaces all other events of the same type, opposed to the {@link Highcharts#addEvent} function.",
								"kind": "function",
								"parameters": {
									"eventType": {
										"description": "The event type. If the type is `click`, Highcharts will internally\n       translate it to a `touchstart` event on touch devices, to prevent\n       the browser from waiting for a click event from firing.",
										"types": [
											"string"
										]
									},
									"handler": {
										"description": "The handler callback.",
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4177
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.setRadialReference",
								"description": "Set the coordinates needed to draw a consistent radial gradient across a shape regardless of positioning inside the chart. Used on pie slices to make all the slices have the same radial reference point.",
								"kind": "function",
								"parameters": {
									"coordinates": {
										"description": "The center reference. The format is `[centerX, centerY, diameter]`\n       in pixels.",
										"types": [
											"Array.<number>"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4222
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.translate",
								"description": "Move an object and its children by x and y values.",
								"kind": "function",
								"parameters": {
									"x": {
										"description": "The x value.",
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The y value.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4255
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.invert",
								"description": "Invert a group, rotate and flip. This is used internally on inverted charts, where the points and graphs are drawn as if not inverted, then the series group elements are inverted.",
								"kind": "function",
								"parameters": {
									"inverted": {
										"description": "Whether to invert or not. An inverted shape can be un-inverted by\n       setting it to false.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Return the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4273
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.toFront",
								"description": "Bring the element to the front. Alternatively, a new zIndex can be set.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4357
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.align",
								"description": "Align the element relative to the chart or another box.",
								"kind": "function",
								"parameters": {
									"alignOptions": {
										"description": "The alignment options. The function can be called without this\n       parameter in order to re-align an element after the box has been\n       updated.",
										"isOptional": true,
										"types": [
											"Highcharts.AlignObject"
										]
									},
									"alignByTranslate": {
										"description": "Align element by translation.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"box": {
										"description": "The box to align to, needs a width and height. When the box is a\n       string, it refers to an object in the Renderer. For example, when\n       box is `spacingBox`, it refers to `Renderer.spacingBox` which\n       holds `width`, `height`, `x` and `y` properties.",
										"isOptional": true,
										"types": [
											"string",
											"Highcharts.BBoxObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4375
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.getBBox",
								"description": "Get the bounding box (width, height, x and y) for the element. Generally used to get rendered text size. Since this is called a lot in charts, the results are cached based on text properties, in order to save DOM traffic. The returned bounding box includes the rotation, so for example a single text line of rotation 90 will report a greater height, and a width corresponding to the line-height.",
								"kind": "function",
								"parameters": {
									"reload": {
										"description": "Skip the cache and get the updated DOM bouding box.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"rot": {
										"description": "Override the element's rotation. This is internally used on axis\n       labels with a value of 0 to find out what the bounding box would\n       be have been if it were not rotated.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.BBoxObject"
									],
									"description": "The bounding box with `x`, `y`, `width` and `height` properties."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4466
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.show",
								"description": "Show the element after it has been hidden.",
								"kind": "function",
								"parameters": {
									"inherit": {
										"description": "Set the visibility attribute to `inherit` rather than `visible`.\n       The difference is that an element with `visibility=\"visible\"`\n       will be visible even if the parent is hidden.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4649
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.hide",
								"description": "Hide the element, equivalent to setting the `visibility` attribute to `hidden`.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4666
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.fadeOut",
								"description": "Fade out an element by animating its opacity down to 0, and hide it on complete. Used internally for the tooltip.",
								"kind": "function",
								"parameters": {
									"duration": {
										"description": "The fade duration in milliseconds.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4679
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.add",
								"description": "Add the element to the DOM. All elements must be added this way.",
								"kind": "function",
								"parameters": {
									"parent": {
										"description": "The parent item to add it to. If undefined, the element is added\n       to the {@link Highcharts.SVGRenderer.box}.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGElement",
											"Highcharts.SVGDOMElement"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4701
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.destroy",
								"description": "Destroy the element and element wrapper and clear up the DOM and event hooks.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4772
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.shadow",
								"description": "Add a shadow to the element. Must be called after the element is added to the DOM. In styled mode, this method is not used, instead use `defs` and filters.",
								"kind": "function",
								"parameters": {
									"shadowOptions": {
										"description": "The shadow options. If `true`, the default options are applied. If\n       `false`, the current shadow will be removed.",
										"types": [
											"boolean",
											"Highcharts.ShadowOptionsObject"
										]
									},
									"group": {
										"description": "The SVG group element where the shadows will be applied. The\n       default is to add it to the same parent as the current element.\n       Internally, this is ised for pie slices, where all the shadows are\n       added to an element behind all the slices.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGElement"
										]
									},
									"cutOff": {
										"description": "Used internally for column shadows.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4860
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SVGRenderer",
						"description": "Allows direct access to the Highcharts rendering layer in order to draw primitive shapes like circles, rectangles, paths or text directly on a chart, or independent from any chart. The SVGRenderer represents a wrapper object for SVG in modern browsers. Through the VMLRenderer, part of the `oldie.js` module, it also brings vector graphics to IE <= 8. An existing chart's renderer can be accessed through {@link Chart.renderer}. The renderer can also be used completely decoupled from a chart.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 5350
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.constructor",
								"description": "Allows direct access to the Highcharts rendering layer in order to draw primitive shapes like circles, rectangles, paths or text directly on a chart, or independent from any chart. The SVGRenderer represents a wrapper object for SVG in modern browsers. Through the VMLRenderer, part of the `oldie.js` module, it also brings vector graphics to IE <= 8. An existing chart's renderer can be accessed through {@link Chart.renderer}. The renderer can also be used completely decoupled from a chart.",
								"kind": "constructor",
								"parameters": {
									"container": {
										"description": "Where to put the SVG in the web page.",
										"types": [
											"Highcharts.HTMLDOMElement"
										]
									},
									"width": {
										"description": "The width of the SVG.",
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The height of the SVG.",
										"types": [
											"number"
										]
									},
									"forExport": {
										"description": "Whether the rendered content is intended for export.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"allowHTML": {
										"description": "Whether the renderer is allowed to include HTML text, which will be\n       projected on top of the SVG.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.Element",
								"description": "A pointer to the renderer's associated Element class. The VMLRenderer will have a pointer to VMLElement here.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5392
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.init",
								"description": "Initialize the SVGRenderer. Overridable initiator function that takes the same parameters as the constructor.",
								"kind": "function",
								"parameters": {
									"container": {
										"description": "Where to put the SVG in the web page.",
										"types": [
											"Highcharts.HTMLDOMElement"
										]
									},
									"width": {
										"description": "The width of the SVG.",
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The height of the SVG.",
										"types": [
											"number"
										]
									},
									"forExport": {
										"description": "Whether the rendered content is intended for export.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"allowHTML": {
										"description": "Whether the renderer is allowed to include HTML text, which will\n       be projected on top of the SVG.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5403
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.box",
								"description": "The root `svg` node of the renderer.",
								"kind": "member",
								"types": [
									"Highcharts.SVGDOMElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5454
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.boxWrapper",
								"description": "The wrapper for the root `svg` node of the renderer.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5461
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.defs",
								"description": "A pointer to the `defs` node of the root SVG.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5497
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.setStyle",
								"description": "Apply the global style on the renderer, mixed with the default styles.",
								"kind": "function",
								"parameters": {
									"style": {
										"description": "CSS to apply.",
										"types": [
											"Highcharts.CSSObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5568
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.isHidden",
								"description": "Detect whether the renderer is hidden. This happens when one of the parent elements has `display: none`. Used internally to detect when we needto render preliminarily in another div to get the text bounding boxes right.",
								"kind": "function",
								"return": {
									"types": [
										"boolean"
									],
									"description": "True if it is hidden."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5582
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.destroy",
								"description": "Destroys the renderer and its allocated members.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5597
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.createElement",
								"description": "Create a wrapper for an SVG element. Serves as a factory for {@link SVGElement}, but this function is itself mostly called from primitive factories like {@link SVGRenderer#path}, {@link SVGRenderer#rect} or {@link SVGRenderer#text}.",
								"kind": "function",
								"parameters": {
									"nodeName": {
										"description": "The node name, for example `rect`, `g` etc.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated SVGElement."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5628
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.draw",
								"description": "Dummy function for plugins, called every time the renderer is updated. Prior to Highcharts 5, this was used for the canvg renderer.",
								"kind": "function",
								"isDeprecated": true,
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5648
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.escapes",
								"description": "A collection of characters mapped to HTML entities. When `useHTML` on an element is true, these entities will be rendered correctly by HTML. In the SVG pseudo-HTML, they need to be unescaped back to simple characters, so for example `&lt;` will render as `<`.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<string>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 5819
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.getContrast",
								"description": "Returns white for dark colors and black for bright colors.",
								"kind": "function",
								"parameters": {
									"rgba": {
										"description": "The color to get the contrast for.",
										"types": [
											"Highcharts.ColorString"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "The contrast color, either `#000000` or `#FFFFFF`."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6208
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.button",
								"description": "Create a button with preset states.",
								"kind": "function",
								"parameters": {
									"text": {
										"description": "The text or HTML to draw.",
										"types": [
											"string"
										]
									},
									"x": {
										"description": "The x position of the button's left side.",
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The y position of the button's top side.",
										"types": [
											"number"
										]
									},
									"callback": {
										"description": "The function to execute on button click or touch.",
										"types": [
											"function"
										]
									},
									"normalState": {
										"description": "SVG attributes for the normal state.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"hoverState": {
										"description": "SVG attributes for the hover state.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"pressedState": {
										"description": "SVG attributes for the pressed state.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"disabledState": {
										"description": "SVG attributes for the disabled state.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"shape": {
										"description": "The shape type.",
										"isOptional": true,
										"types": [
											"Highcharts.SymbolKey"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The button element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6231
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.crispLine",
								"description": "Make a straight line crisper by not spilling out to neighbour pixels.",
								"kind": "function",
								"parameters": {
									"points": {
										"description": "The original points on the format `['M', 0, 0, 'L', 100, 0]`.",
										"types": [
											"Highcharts.SVGPathArray"
										]
									},
									"width": {
										"description": "The width of the line.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGPathArray"
									],
									"description": "The original points array, but modified to render crisply."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6404
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.path",
								"description": "Draw a path, wraps the SVG `path` element.",
								"kind": "function",
								"parameters": {
									"path": {
										"description": "An SVG path definition in array form.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGPathArray"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6432
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.path",
								"description": "Draw a path, wraps the SVG `path` element.",
								"kind": "function",
								"parameters": {
									"attribs": {
										"description": "The initial attributes.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6432
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.circle",
								"description": "Draw a circle, wraps the SVG `circle` element.",
								"kind": "function",
								"parameters": {
									"x": {
										"description": "The center x position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The center y position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"r": {
										"description": "The radius.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6478
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.circle",
								"description": "Draw a circle, wraps the SVG `circle` element.",
								"kind": "function",
								"parameters": {
									"attribs": {
										"description": "The initial attributes.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6478
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.arc",
								"description": "Draw and return an arc.",
								"kind": "function",
								"parameters": {
									"x": {
										"description": "Center X position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "Center Y position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"r": {
										"description": "The outer radius of the arc.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"innerR": {
										"description": "Inner radius like used in donut charts.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"start": {
										"description": "The starting angle of the arc in radians, where 0 is to the right\n        and `-Math.PI/2` is up.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"end": {
										"description": "The ending angle of the arc in radians, where 0 is to the right\n       and `-Math.PI/2` is up.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6520
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.arc",
								"description": "Draw and return an arc. Overloaded function that takes arguments object.",
								"kind": "function",
								"parameters": {
									"attribs": {
										"description": "Initial SVG attributes.",
										"types": [
											"Highcharts.SVGAttributes"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6520
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.rect",
								"description": "Draw and return a rectangle.",
								"kind": "function",
								"parameters": {
									"x": {
										"description": "Left position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "Top position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"width": {
										"description": "Width of the rectangle.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"height": {
										"description": "Height of the rectangle.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"r": {
										"description": "Border corner radius.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"strokeWidth": {
										"description": "A stroke width can be supplied to allow crisp drawing.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6588
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.rect",
								"description": "Draw and return a rectangle.",
								"kind": "function",
								"parameters": {
									"attributes": {
										"description": "General SVG attributes for the rectangle.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6588
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.setSize",
								"description": "Resize the {@link SVGRenderer#box} and re-align all aligned child elements.",
								"kind": "function",
								"parameters": {
									"width": {
										"description": "The new pixel width.",
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The new pixel height.",
										"types": [
											"number"
										]
									},
									"animate": {
										"description": "Whether and how to animate.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6663
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.g",
								"description": "Create and return an svg group element. Child {@link Highcharts.SVGElement} objects are added to the group by using the group as the first parameter in {@link Highcharts.SVGElement#add|add()}.",
								"kind": "function",
								"parameters": {
									"name": {
										"description": "The group will be given a class name of `highcharts-{name}`. This\n       can be used for styling and scripting.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6707
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.image",
								"description": "Display an image.",
								"kind": "function",
								"parameters": {
									"src": {
										"description": "The image source.",
										"types": [
											"string"
										]
									},
									"x": {
										"description": "The X position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The Y position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"width": {
										"description": "The image width. If omitted, it defaults to the image file width.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The image height. If omitted it defaults to the image file\n       height.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"onload": {
										"description": "Event handler for image load.",
										"isOptional": true,
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6726
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.symbol",
								"description": "Draw a symbol out of pre-defined shape paths from {@link SVGRenderer#symbols}. It is used in Highcharts for point makers, which cake a `symbol` option, and label and button backgrounds like in the tooltip and stock flags.",
								"kind": "function",
								"parameters": {
									"symbol": {
										"description": "The symbol name.",
										"types": [
											"symbol"
										]
									},
									"x": {
										"description": "The X coordinate for the top left position.",
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The Y coordinate for the top left position.",
										"types": [
											"number"
										]
									},
									"width": {
										"description": "The pixel width.",
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The pixel height.",
										"types": [
											"number"
										]
									},
									"options": {
										"description": "Additional options, depending on the actual symbol drawn.",
										"isOptional": true,
										"types": [
											"Highcharts.SymbolOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 6816
									}
								]
							},
							"children": [
								{
									"doclet": {
										"name": "Highcharts.SVGRenderer.symbol.centerImage",
										"description": "Set the size and position",
										"kind": "function",
										"return": {
											"types": [
												"void"
											]
										}
									},
									"meta": {
										"files": [
											{
												"path": "code/highcharts.src.js",
												"line": 6911
											}
										]
									}
								}
							]
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.symbols",
								"description": "An extendable collection of functions for defining symbol paths.",
								"kind": "member",
								"types": [
									"Highcharts.SymbolDictionary"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7007
									}
								]
							},
							"children": [
								{
									"doclet": {
										"name": "Highcharts.SVGRenderer.symbols.callout",
										"description": "Callout shape used for default tooltips, also used for rounded rectangles in VML",
										"kind": "function",
										"isStatic": true,
										"return": {
											"types": [
												"void"
											]
										}
									},
									"meta": {
										"files": [
											{
												"path": "code/highcharts.src.js",
												"line": 7118
											}
										]
									}
								}
							]
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.clipRect",
								"description": "Define a clipping rectangle. The clipping rectangle is later applied to {@link SVGElement} objects through the {@link SVGElement#clip} function.",
								"kind": "function",
								"parameters": {
									"id": {
										"types": [
											"string"
										]
									},
									"x": {
										"types": [
											"number"
										]
									},
									"y": {
										"types": [
											"number"
										]
									},
									"width": {
										"types": [
											"number"
										]
									},
									"height": {
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.ClipRectElement"
									],
									"description": "A clipping rectangle."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7220
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.text",
								"description": "Draw text. The text can contain a subset of HTML, like spans and anchors and some basic text styling of these. For more advanced features like border and background, use {@link Highcharts.SVGRenderer#label} instead. To update the text after render, run `text.attr({ text: 'New text' })`.",
								"kind": "function",
								"parameters": {
									"str": {
										"description": "The text of (subset) HTML to draw.",
										"types": [
											"string"
										]
									},
									"x": {
										"description": "The x position of the text's lower left corner.",
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The y position of the text's lower left corner.",
										"types": [
											"number"
										]
									},
									"useHTML": {
										"description": "Use HTML to render the text.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The text object."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7269
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.fontMetrics",
								"description": "Utility to return the baseline offset and total line height from the font size.",
								"kind": "function",
								"parameters": {
									"fontSize": {
										"description": "The current font size to inspect. If not given, the font size\n       will be found from the DOM element.",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"elem": {
										"description": "The element to inspect for a current font size.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGElement",
											"Highcharts.SVGDOMElement"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.FontMetricsObject"
									],
									"description": "The font metrics."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7342
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.label",
								"description": "Draw a label, which is an extended text element with support for border and background. Highcharts creates a `g` element with a text and a `path` or `rect` inside, to make it behave somewhat like a HTML div. Border and background are set through `stroke`, `stroke-width` and `fill` attributes using the {@link Highcharts.SVGElement#attr|attr} method. To update the text after render, run `label.attr({ text: 'New text' })`.",
								"kind": "function",
								"parameters": {
									"str": {
										"description": "The initial text string or (subset) HTML to render.",
										"types": [
											"string"
										]
									},
									"x": {
										"description": "The x position of the label's left side.",
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The y position of the label's top side or baseline, depending on\n       the `baseline` parameter.",
										"types": [
											"number"
										]
									},
									"shape": {
										"description": "The shape of the label's border/background, if any. Defaults to\n       `rect`. Other possible values are `callout` or other shapes\n       defined in {@link Highcharts.SVGRenderer#symbols}.",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"anchorX": {
										"description": "In case the `shape` has a pointer, like a flag, this is the\n       coordinates it should be pinned to.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"anchorY": {
										"description": "In case the `shape` has a pointer, like a flag, this is the\n       coordinates it should be pinned to.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"useHTML": {
										"description": "Wether to use HTML to render the label.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"baseline": {
										"description": "Whether to position the label relative to the text baseline,\n       like {@link Highcharts.SVGRenderer#text|renderer.text}, or to the\n       upper border of the rectangle.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"className": {
										"description": "Class name for the group.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated label."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7418
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.NormalizedIntervalObject",
						"description": "Normalized interval.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8318
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.NormalizedIntervalObject.unitRange",
								"description": "The interval in axis values (ms)",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8318
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.NormalizedIntervalObject.count",
								"description": "The count",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8318
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TimeTicksInfoObject",
						"description": "Additonal time tick information.",
						"kind": "typedef",
						"types": [
							"Highcharts.NormalizedIntervalObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8330
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.TimeTicksInfoObject.higherRanks",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<string>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8330
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TimeTicksInfoObject.totalRange",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8330
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TimeTicksObject",
						"description": "Time ticks.",
						"kind": "typedef",
						"types": [
							"Array.<number>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8340
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.TimeTicksObject.info",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.TimeTicksInfoObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8340
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Time",
						"description": "The Time class. Time settings are applied in general for each page using `Highcharts.setOptions`, or individually for each Chart item through the [time](https://api.highcharts.com/highcharts/time) options set. The Time object is available from [Chart.time](http://api.highcharts.com/class-reference/Highcharts.Chart#.time), which refers to `Highcharts.time` if no individual time settings are applied.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8359
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Time.constructor",
								"description": "The Time class. Time settings are applied in general for each page using `Highcharts.setOptions`, or individually for each Chart item through the [time](https://api.highcharts.com/highcharts/time) options set. The Time object is available from [Chart.time](http://api.highcharts.com/class-reference/Highcharts.Chart#.time), which refers to `Highcharts.time` if no individual time settings are applied.",
								"kind": "constructor",
								"parameters": {
									"options": {
										"description": "Time options as defined in [chart.options.time](/highcharts/time).",
										"types": [
											"Highcharts.TimeOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.getTimezoneOffset",
								"description": "Get the time zone offset based on the current timezone information as set in the global options.",
								"kind": "function",
								"parameters": {
									"timestamp": {
										"description": "The JavaScript timestamp to inspect.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "The timezone offset in minutes compared to UTC."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8567
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.makeTime",
								"description": "Make a time and returns milliseconds. Interprets the inputs as UTC time, local time or a specific timezone time depending on the current time settings.",
								"kind": "function",
								"parameters": {
									"year": {
										"description": "The year",
										"types": [
											"number"
										]
									},
									"month": {
										"description": "The month. Zero-based, so January is 0.",
										"types": [
											"number"
										]
									},
									"date": {
										"description": "The day of the month",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"hours": {
										"description": "The hour of the day, 0-23.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"minutes": {
										"description": "The minutes",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"seconds": {
										"description": "The seconds",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "The time in milliseconds since January 1st 1970."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8662
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.dateFormat",
								"description": "Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a human readable date string. The format is a subset of the formats for PHP's [strftime](http://www.php.net/manual/en/function.strftime.php) function. Additional formats can be given in the {@link Highcharts.dateFormats} hook.",
								"kind": "function",
								"parameters": {
									"format": {
										"description": "The desired format where various time representations are\n       prefixed with %.",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"timestamp": {
										"description": "The JavaScript timestamp.",
										"types": [
											"number"
										]
									},
									"capitalize": {
										"description": "Upper case first letter in the return.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "The formatted date."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8778
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.getTimeTicks",
								"description": "Return an array with time positions distributed on round time values right and right after min and max. Used in datetime axes as well as for grouping data on a datetime axis.",
								"kind": "function",
								"parameters": {
									"normalizedInterval": {
										"description": "The interval in axis values (ms) and the count",
										"types": [
											"Highcharts.NormalizedIntervalObject"
										]
									},
									"min": {
										"description": "The minimum in axis values",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"max": {
										"description": "The maximum in axis values",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"startOfWeek": {
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.TimeTicksObject"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8912
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.dateFormats",
						"description": "A hook for defining additional date format specifiers. New specifiers are defined as key-value pairs by using the specifier as key, and a function which takes the timestamp as value. This function returns the formatted portion of the date.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Highcharts.Dictionary.<function()>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8877
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.defaultOptions",
						"description": "Global default settings.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Highcharts.Options"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 9162
							}
						]
					},
					"children": []
				},
				{
					"doclet": {
						"name": "Highcharts.setOptions",
						"description": "Merge the default options with custom options and return the new options structure. Commonly used for defining reusable templates.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"options": {
								"description": "The new custom chart options.",
								"types": [
									"Highcharts.Options"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Options"
							],
							"description": "Updated options."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 12527
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getOptions",
						"description": "Get the updated default options. Until 3.0.7, merely exposing defaultOptions for outside modules wasn't enough because the setOptions method created a new object.",
						"kind": "function",
						"isStatic": true,
						"return": {
							"types": [
								"Highcharts.Options"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 12556
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.time",
						"description": "Global `Time` object with default options. Since v6.0.5, time settings can be applied individually for each chart. If no individual settings apply, this `Time` object is shared by all instances.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Highcharts.Time"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 12574
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.dateFormat",
						"description": "Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a human readable date string. The format is a subset of the formats for PHP's [strftime]{@link http://www.php.net/manual/en/function.strftime.php} function. Additional formats can be given in the {@link Highcharts.dateFormats} hook. Since v6.0.5, all internal dates are formatted through the [Chart.time](Chart#time) instance to respect chart-level time settings. The `Highcharts.dateFormat` function only reflects global time settings set with `setOptions`.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"format": {
								"description": "The desired format where various time representations are prefixed\n       with `%`.",
								"types": [
									"string"
								]
							},
							"timestamp": {
								"description": "The JavaScript timestamp.",
								"types": [
									"number"
								]
							},
							"capitalize": {
								"description": "Upper case first letter in the return.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted date."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 12584
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisCrosshairOptions",
						"description": "Options for crosshairs on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisCrosshairOptions",
							"Highcharts.YAxisCrosshairOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13246
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisOptions",
						"description": "Options for axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisOptions",
							"Highcharts.YAxisOptions",
							"Highcharts.ZAxisOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13252
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisTitlePositionObject",
						"description": "Position of the axis title.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13258
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AxisTitlePositionObject.x",
								"description": "X position.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13258
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisTitlePositionObject.y",
								"description": "Y position.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13258
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ExtremesObject",
						"description": "The returned object literal from the {@link Highcharts.Axis#getExtremes} function.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13270
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.dataMax",
								"description": "The maximum value of the axis' associated series.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13270
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.dataMin",
								"description": "The minimum value of the axis' associated series.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13270
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.max",
								"description": "The maximum axis value, either automatic or set manually. If the `max` option is not set, `maxPadding` is 0 and `endOnTick` is false, this value will be the same as `dataMax`.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13270
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.min",
								"description": "The minimum axis value, either automatic or set manually. If the `min` option is not set, `minPadding` is 0 and `startOnTick` is false, this value will be the same as `dataMin`.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13270
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.userMax",
								"description": "The user defined maximum, either from the `max` option or from a zoom or `setExtremes` action.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13270
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.userMin",
								"description": "The user defined minimum, either from the `min` option or from a zoom or `setExtremes` action.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13270
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Axis",
						"description": "Create a new axis object. Called internally when instanciating a new chart or adding axes by {@link Highcharts.Chart#addAxis}. A chart can have from 0 axes (pie chart) to multiples. In a normal, single series cartesian chart, there is one X axis and one Y axis. The X axis or axes are referenced by {@link Highcharts.Chart.xAxis}, which is an array of Axis objects. If there is only one axis, it can be referenced through `chart.xAxis[0]`, and multiple axes have increasing indices. The same pattern goes for Y axes. If you need to get the axes from a series object, use the `series.xAxis` and `series.yAxis` properties. These are not arrays, as one series can only be associated to one X and one Y axis. A third way to reference the axis programmatically is by `id`. Add an `id` in the axis configuration options, and get the axis by {@link Highcharts.Chart#get}. Configuration options for the axes are given in options.xAxis and options.yAxis.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 13333
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Axis.constructor",
								"description": "Create a new axis object. Called internally when instanciating a new chart or adding axes by {@link Highcharts.Chart#addAxis}. A chart can have from 0 axes (pie chart) to multiples. In a normal, single series cartesian chart, there is one X axis and one Y axis. The X axis or axes are referenced by {@link Highcharts.Chart.xAxis}, which is an array of Axis objects. If there is only one axis, it can be referenced through `chart.xAxis[0]`, and multiple axes have increasing indices. The same pattern goes for Y axes. If you need to get the axes from a series object, use the `series.xAxis` and `series.yAxis` properties. These are not arrays, as one series can only be associated to one X and one Y axis. A third way to reference the axis programmatically is by `id`. Add an `id` in the axis configuration options, and get the axis by {@link Highcharts.Chart#get}. Configuration options for the axes are given in options.xAxis and options.yAxis.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The Chart instance to apply the axis on.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "Axis options.",
										"types": [
											"Highcharts.AxisOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.init",
								"description": "Overrideable function to initialize the axis.",
								"kind": "function",
								"see": [
									"{@link Axis}"
								],
								"fires": [
									"Highcharts.Axis#afterInit",
									"Highcharts.Axis#init"
								],
								"parameters": {
									"chart": {
										"types": [
											"Highcharts.Chart"
										]
									},
									"userOptions": {
										"types": [
											"Highcharts.Options"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16248
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.chart",
								"description": "The Chart that the axis belongs to.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16268
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.horiz",
								"description": "Whether the axis is horizontal.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16276
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.coll",
								"description": "The collection where the axis belongs, for example `xAxis`, `yAxis` or `colorAxis`. Corresponds to properties on Chart, for example {@link Chart.xAxis}.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16287
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.side",
								"description": "The side on which the axis is rendered. 0 is top, 1 is right, 2 is bottom and 3 is left.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16301
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.reversed",
								"description": "Whether the axis is reversed. Based on the `axis.reversed`, option, but inverted charts have reversed xAxis by default.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16329
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.max",
								"description": "The maximum value of the axis. In a logarithmic axis, this is the logarithm of the real value, and the real value can be obtained from {@link Axis#getExtremes}.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16385
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.min",
								"description": "The minimum value of the axis. In a logarithmic axis, this is the logarithm of the real value, and the real value can be obtained from {@link Axis#getExtremes}.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16394
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.crosshair",
								"description": "The processed crosshair options.",
								"kind": "member",
								"types": [
									"false",
									"Highcharts.AxisCrosshairOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16405
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.series",
								"description": "All series associated to the axis.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Series>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16430
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.toPixels",
								"description": "Translate a value in terms of axis units into pixels within the chart.",
								"kind": "function",
								"parameters": {
									"value": {
										"description": "A value in terms of axis units.",
										"types": [
											"number"
										]
									},
									"paneCoordinates": {
										"description": "Whether to return the pixel coordinate relative to the chart or\n       just the axis/pane itself.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "Pixel position of the value on the chart or axis."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16775
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.toValue",
								"description": "Translate a pixel position along the axis to a value in terms of axis units.",
								"kind": "function",
								"parameters": {
									"pixel": {
										"description": "The pixel value coordinate.",
										"types": [
											"number"
										]
									},
									"paneCoordiantes": {
										"description": "Whether the input pixel is relative to the chart or just the\n       axis/pane itself.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "The axis value."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16795
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getPlotLinePath",
								"description": "Create the path for a plot line that goes from the given value on this axis, across the plot to the opposite side. Also used internally for grid lines and crosshairs.",
								"kind": "function",
								"parameters": {
									"value": {
										"description": "Axis value.",
										"types": [
											"number"
										]
									},
									"lineWidth": {
										"description": "Used for calculation crisp line coordinates.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"old": {
										"description": "Use old coordinates (for resizing and rescaling).",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"force": {
										"description": "If `false`, the function will return null when it falls outside\n       the axis bounds.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"translatedValue": {
										"description": "If given, return the plot line path of a pixel position on the\n       axis.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Array.<(string|number)>"
									],
									"description": "The SVG path definition for the plot line."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16821
									}
								]
							},
							"children": [
								{
									"doclet": {
										"name": "Highcharts.Axis.getPlotLinePath.between",
										"description": "Check if x is between a and b. If not, either move to a/b or skip, depending on the force parameter.",
										"kind": "function",
										"return": {
											"types": [
												"void"
											]
										}
									},
									"meta": {
										"files": [
											{
												"path": "code/highcharts.src.js",
												"line": 16865
											}
										]
									}
								}
							]
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getLinearTickPositions",
								"description": "Internal function to et the tick positions of a linear axis to round values like whole tens or every five.",
								"kind": "function",
								"parameters": {
									"tickInterval": {
										"description": "The normalized tick interval.",
										"types": [
											"number"
										]
									},
									"min": {
										"description": "Axis minimum.",
										"types": [
											"number"
										]
									},
									"max": {
										"description": "Axis maximum.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Array.<number>"
									],
									"description": "An array of axis values where ticks should be placed."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16907
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getMinorTickInterval",
								"description": "Resolve the new minorTicks/minorTickInterval options into the legacy loosely typed minorTickInterval option.",
								"kind": "function",
								"return": {
									"types": [
										"number",
										"'auto'",
										"null"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16973
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getMinorTickPositions",
								"description": "Internal function to return the minor tick positions. For logarithmic axes, the same logic as for major ticks is reused.",
								"kind": "function",
								"return": {
									"types": [
										"Array.<number>"
									],
									"description": "An array of axis values where ticks should be placed."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 16993
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setTickPositions",
								"description": "Now we have computed the normalized tickInterval, get the tick positions",
								"kind": "function",
								"fires": [
									"Highcharts.Axis#afterSetTickPositions"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17687
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setExtremes",
								"description": "Set the minimum and maximum of the axes after render time. If the `startOnTick` and `endOnTick` options are true, the minimum and maximum values are rounded off to the nearest tick. To prevent this, these options can be set to false before calling setExtremes. Also, setExtremes will not allow a range lower than the `minRange` option, which by default is the range of five points.",
								"kind": "function",
								"fires": [
									"Highcharts.Axis#setExtremes"
								],
								"parameters": {
									"newMin": {
										"description": "The new minimum value.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"newMax": {
										"description": "The new maximum value.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart or wait for an explicit call to\n       {@link Highcharts.Chart#redraw}",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Enable or modify animations.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									},
									"eventArguments": {
										"description": "Arguments to be accessed in event handler.",
										"isOptional": true,
										"types": [
											"*"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18103
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getExtremes",
								"description": "Get the current extremes for the axis.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.ExtremesObject"
									],
									"description": "An object containing extremes information."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18281
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getThreshold",
								"description": "Get the zero plane either based on zero or on the min or max value. Used in bar and area plots.",
								"kind": "function",
								"parameters": {
									"threshold": {
										"description": "The threshold in axis values.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "The translated threshold position in terms of pixels, and\n        corrected to stay within the axis bounds."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18308
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.hasData",
								"description": "Return true if the axis has associated data.",
								"kind": "function",
								"return": {
									"types": [
										"boolean"
									],
									"description": "True if the axis has associated visible series and those series\n        have either valid data points or explicit `min` and `max`\n        settings."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18725
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.addTitle",
								"description": "Adds the title defined in axis.options.title.",
								"kind": "function",
								"parameters": {
									"display": {
										"description": "Whether or not to display the title.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18747
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getLinePath",
								"description": "Internal function to get the path for the axis line. Extended for polar charts.",
								"kind": "function",
								"parameters": {
									"lineWidth": {
										"description": "The line width in pixels.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGPathArray"
									],
									"description": "The SVG path definition in array form."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19014
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.renderLine",
								"description": "Render the axis line. Called internally when rendering and redrawing the axis.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19058
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.renderMinorTick",
								"description": "Render a minor tick into the given position. If a minor tick already exists in this position, move it.",
								"kind": "function",
								"parameters": {
									"pos": {
										"description": "The position in axis values.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19144
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.renderTick",
								"description": "Render a major tick into the given position. If a tick already exists in this position, move it.",
								"kind": "function",
								"parameters": {
									"pos": {
										"description": "The position in axis values.",
										"types": [
											"number"
										]
									},
									"i": {
										"description": "The tick index.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19169
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.drawCrosshair",
								"description": "Internal function to draw a crosshair.",
								"kind": "function",
								"fires": [
									"Highcharts.Axis#afterDrawCrosshair",
									"Highcharts.Axis#drawCrosshair"
								],
								"parameters": {
									"e": {
										"description": "The event arguments from the modified pointer event, extended with\n       `chartX` and `chartY`",
										"isOptional": true,
										"types": [
											"Highcharts.PointerEventObject"
										]
									},
									"point": {
										"description": "The Point object if the crosshair snaps to points.",
										"isOptional": true,
										"types": [
											"Highcharts.Point"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19489
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.hideCrosshair",
								"description": "Hide the crosshair if visible.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19619
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getPlotBandPath",
								"description": "Internal function to create the SVG path definition for a plot band.",
								"kind": "function",
								"parameters": {
									"from": {
										"description": "The axis value to start from.",
										"types": [
											"number"
										]
									},
									"to": {
										"description": "The axis value to end on.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGPathArray"
									],
									"description": "The SVG path definition in array form."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20829
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.addPlotBand",
								"description": "Add a plot band after render time.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "A configuration object for the plot band, as defined in\n       {@link  https://api.highcharts.com/highcharts/xAxis.plotBands|xAxis.plotBands}.",
										"types": [
											"Highcharts.AxisPlotBandsOptions"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.PlotLineOrBand",
										"undefined"
									],
									"description": "The added plot band."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20899
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.addPlotLine",
								"description": "Add a plot line after render time.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "A configuration object for the plot line, as defined in\n       {@link https://api.highcharts.com/highcharts/xAxis.plotLines|xAxis.plotLines}.",
										"types": [
											"Highcharts.AxisPlotLinesOptions"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.PlotLineOrBand",
										"undefined"
									],
									"description": "The added plot line."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20918
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.removePlotBand",
								"description": "Remove a plot band by its id.",
								"kind": "function",
								"parameters": {
									"id": {
										"description": "The plot band's `id` as given in the original configuration\n       object or in the `addPlotBand` option.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21001
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.removePlotLine",
								"description": "Remove a plot line by its id.",
								"kind": "function",
								"parameters": {
									"id": {
										"description": "The plot line's `id` as given in the original configuration\n       object or in the `addPlotLine` option.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21019
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.update",
								"description": "Update an axis object with a new set of options. The options are merged with the existing options, so only new or altered options need to be specified.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The new options that will be merged in with existing options on\n       the axis.",
										"types": [
											"Highcharts.XAxisOptions",
											"Highcharts.YAxisOptions",
											"Highcharts.ZAxisOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35705
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.remove",
								"description": "Remove the axis from the chart.",
								"kind": "function",
								"parameters": {
									"redraw": {
										"description": "Whether to redraw the chart following the remove.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35751
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setTitle",
								"description": "Update the axis title by options after render time.",
								"kind": "function",
								"parameters": {
									"titleOptions": {
										"description": "The additional title options.",
										"types": [
											"Highcharts.XAxisTitleOptions",
											"Highcharts.YAxisTitleOptions",
											"Highcharts.ZAxisTitleOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after setting the title.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35796
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setCategories",
								"description": "Set new axis categories and optionally redraw.",
								"kind": "function",
								"parameters": {
									"categories": {
										"description": "The new categories.",
										"types": [
											"Array.<string>"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35814
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPlotBandsOptions",
						"description": "Options for plot bands on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisPlotBandsOptions",
							"Highcharts.YAxisPlotBandsOptions",
							"Highcharts.ZAxisPlotBandsOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 19945
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPlotBandsLabelOptions",
						"description": "Options for plot band labels on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisPlotBandsLabelOptions",
							"Highcharts.YAxisPlotBandsLabelOptions",
							"Highcharts.ZAxisPlotBandsLabelOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 19951
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPlotLinesOptions",
						"description": "Options for plot lines on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisPlotLinesOptions",
							"Highcharts.YAxisPlotLinesOptions",
							"Highcharts.ZAxisPlotLinesOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 19957
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPlotLinesLabelOptions",
						"description": "Options for plot line labels on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisPlotLinesLabelOptions",
							"Highcharts.YAxisPlotLinesLabelOptions",
							"Highcharts.ZAxisPlotLinesLabelOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 19963
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PlotLineOrBand",
						"description": "The object wrapper for plot lines and plot bands",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 19980
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PlotLineOrBand.constructor",
								"description": "The object wrapper for plot lines and plot bands",
								"kind": "constructor",
								"parameters": {
									"axis": {
										"types": [
											"Highcharts.Axis"
										]
									},
									"options": {
										"types": [
											"Highcharts.AxisPlotLinesOptions",
											"Highcharts.AxisPlotBandsOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PlotLineOrBand.svgElement",
								"description": "SVG element of the plot line or band.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20077
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PlotLineOrBand.label",
								"description": "SVG element of the label.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20188
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PlotLineOrBand.destroy",
								"description": "Remove the plot line or band.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20227
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Tooltip",
						"description": "Tooltip of a chart.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 21060
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Tooltip.constructor",
								"description": "Tooltip of a chart.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The chart instance.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "Tooltip options.",
										"types": [
											"Highcharts.TooltipOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.chart",
								"description": "Chart of the tooltip.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21090
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.options",
								"description": "Used tooltip options.",
								"kind": "member",
								"types": [
									"Highcharts.TooltipOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21099
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.isHidden",
								"description": "Tooltips are initially hidden.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21128
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.split",
								"description": "True, if the tooltip is splitted into one label per series, with the header close to the axis.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21137
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.shared",
								"description": "When the tooltip is shared, the entire plot area will capture mouse movement or touch events.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21147
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.outside",
								"description": "Whether to allow the tooltip to render outside the chart's SVG element box. By default (false), the tooltip is rendered within the chart's SVG element, which results in the tooltip being aligned inside the chart area.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21157
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.getLabel",
								"description": "Creates the Tooltip label element if it does not exist, then returns it.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.SVGElement"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21201
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.update",
								"description": "Updates the tooltip with the provided tooltip options.",
								"kind": "function",
								"parameters": {
									"options": {
										"types": [
											"Highcharts.TooltipOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21286
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.destroy",
								"description": "Removes and destroys the tooltip and its elements.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21300
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.move",
								"description": "Moves the tooltip with a soft animation to a new position.",
								"kind": "function",
								"parameters": {
									"x": {
										"types": [
											"number"
										]
									},
									"y": {
										"types": [
											"number"
										]
									},
									"anchorX": {
										"types": [
											"number"
										]
									},
									"anchorY": {
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21322
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.hide",
								"description": "Hides the tooltip with a fade out animation.",
								"kind": "function",
								"parameters": {
									"delay": {
										"description": "The fade out in milliseconds. If no value is provided the value\n       of the tooltip.hideDelay option is used. A value of 0 disables\n       the fade out animation.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21379
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.refresh",
								"description": "Refresh the tooltip's text and position.",
								"kind": "function",
								"parameters": {
									"pointOrPoints": {
										"description": "Either a point or an array of points.",
										"types": [
											"Highcharts.Point",
											"Array.<Highcharts.Point>"
										]
									},
									"mouseEvent": {
										"description": "Mouse event, that is responsible for the refresh and should be\n       used for the tooltip update.",
										"isOptional": true,
										"types": [
											"global.Event"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21663
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointerAxisCoordinateObject",
						"description": "One position in relation to an axis.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22212
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointerAxisCoordinateObject.axis",
								"description": "Related axis.",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22212
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointerAxisCoordinateObject.value",
								"description": "Axis value.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22212
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointerAxisCoordinatesObject",
						"description": "Positions in terms of axis values.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22224
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointerAxisCoordinatesObject.xAxis",
								"description": "Positions on the x-axis.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.PointerAxisCoordinateObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22224
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointerAxisCoordinatesObject.yAxis",
								"description": "Positions on the y-axis.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.PointerAxisCoordinateObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22224
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointerCoordinatesObject",
						"description": "Pointer coordinates.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22236
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointerCoordinatesObject.chartX",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22236
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointerCoordinatesObject.chartY",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22236
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointerEventObject",
						"description": "A native browser mouse or touch event, extended with position information relative to the {@link Chart.container}.",
						"kind": "typedef",
						"types": [
							"global.PointerEvent"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22246
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointerEventObject.chartX",
								"description": "The X coordinate of the pointer interaction relative to the chart.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22246
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointerEventObject.chartY",
								"description": "The Y coordinate of the pointer interaction relative to the chart.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22246
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SelectDataObject",
						"description": "Axis-specific data of a selection.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22261
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SelectDataObject.axis",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22261
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SelectDataObject.min",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22261
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SelectDataObject.max",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22261
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SelectEventObject",
						"description": "Object for select events.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22273
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SelectEventObject.originalEvent",
								"description": "",
								"kind": "member",
								"types": [
									"global.Event"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22273
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SelectEventObject.xAxis",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<Highcharts.SelectDataObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22273
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SelectEventObject.yAxis",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<Highcharts.SelectDataObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22273
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Pointer",
						"description": "The mouse and touch tracker object. Each {@link Chart} item has one assosiated Pointer item that can be accessed from the {@link Chart.pointer} property.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22305
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Pointer.constructor",
								"description": "The mouse and touch tracker object. Each {@link Chart} item has one assosiated Pointer item that can be accessed from the {@link Chart.pointer} property.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The Chart instance.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "The root options object. The pointer uses options from the chart and\n       tooltip structures.",
										"types": [
											"Highcharts.Options"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.normalize",
								"description": "Takes a browser event object and extends it with custom Highcharts properties `chartX` and `chartY` in order to work on the internal coordinate system.",
								"kind": "function",
								"parameters": {
									"e": {
										"description": "Event object in standard browsers.",
										"types": [
											"global.Event"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.PointerEventObject"
									],
									"description": "A browser event with extended properties `chartX` and `chartY`."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22395
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.getCoordinates",
								"description": "Get the click position in terms of axis values.",
								"kind": "function",
								"parameters": {
									"e": {
										"description": "Pointer event, extended with `chartX` and `chartY` properties.",
										"types": [
											"Highcharts.PointerEventObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.PointerAxisCoordinatesObject"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22427
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.findNearestKDPoints",
								"description": "Finds the closest point to a set of coordinates, using the k-d-tree algorithm.",
								"kind": "function",
								"parameters": {
									"series": {
										"description": "All the series to search in.",
										"types": [
											"Array.<Highcharts.Series>"
										]
									},
									"shared": {
										"description": "Whether it is a shared tooltip or not.",
										"types": [
											"boolean"
										]
									},
									"coordinates": {
										"description": "Chart coordinates of the pointer.",
										"types": [
											"Highcharts.PointerCoordinatesObject"
										]
									}
								},
								"return": {
									"types": [
										"Point",
										"undefined"
									],
									"description": "The point closest to given coordinates."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22454
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.reset",
								"description": "Reset the tracking by hiding the tooltip, the hover series state and the hover point",
								"kind": "function",
								"parameters": {
									"allowMove": {
										"description": "Instead of destroying the tooltip altogether, allow moving it if\n       possible.",
										"types": [
											"boolean"
										]
									},
									"delay": {
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22810
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.inClass",
								"description": "Utility to detect whether an element has, or has a parent with, a specificclass name. Used on detection of tracker objects and on deciding whether hovering the tooltip should cause the active series to mouse out.",
								"kind": "function",
								"parameters": {
									"element": {
										"description": "The element to investigate.",
										"types": [
											"Highcharts.SVGDOMElement",
											"Highcharts.HTMLDOMElement"
										]
									},
									"className": {
										"description": "The class name to look for.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"boolean"
									],
									"description": "True if either the element or one of its parents has the given\n        class name."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 23306
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.destroy",
								"description": "Destroys the Pointer object and disconnects DOM events.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 23467
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Chart",
						"description": "The Chart class. The recommended constructor is {@link Highcharts#chart}.",
						"kind": "class"
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Chart.tooltip",
								"description": "Tooltip object for points of series.",
								"kind": "member",
								"types": [
									"Highcharts.Tooltip"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22352
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.constructor",
								"description": "The Chart class. The recommended constructor is {@link Highcharts#chart}.",
								"kind": "constructor",
								"parameters": {
									"renderTo": {
										"description": "The DOM element to render to, or its id.",
										"isOptional": true,
										"types": [
											"string",
											"Highcharts.HTMLDOMElement"
										]
									},
									"options": {
										"description": "The chart options structure.",
										"types": [
											"Highcharts.Options"
										]
									},
									"callback": {
										"description": "Function to run when the chart has loaded and and all external images\n       are loaded. Defining a\n       {@link https://api.highcharts.com/highcharts/chart.events.load|chart.event.load}\n       handler is equivalent.",
										"isOptional": true,
										"types": [
											"Highcharts.ChartCallbackFunction"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.init",
								"description": "Overridable function that initializes the chart. The constructor's arguments are passed on directly.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#init",
									"Highcharts.Chart#afterInit"
								],
								"parameters": {
									"userOptions": {
										"description": "Custom options.",
										"types": [
											"Highcharts.Options"
										]
									},
									"callback": {
										"description": "Function to run when the chart has loaded and and all external\n       images are loaded.",
										"isOptional": true,
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25616
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.options",
								"description": "The options structure for the chart. It contains members for the sub elements like series, legend, tooltip etc.",
								"kind": "member",
								"types": [
									"Highcharts.Options"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25684
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.axes",
								"description": "All the axes in the chart.",
								"kind": "member",
								"see": [
									"Highcharts.Chart.xAxis",
									"Highcharts.Chart.yAxis"
								],
								"types": [
									"Array.<Highcharts.Axis>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25693
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.series",
								"description": "All the current series in the chart.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Series>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25704
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.time",
								"description": "The `Time` object associated with the chart. Since v6.0.5, time settings can be applied individually for each chart. If no individual settings apply, the `Time` object is shared by all instances.",
								"kind": "member",
								"types": [
									"Highcharts.Time"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25712
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.xAxis",
								"description": "A collection of the X axes in the chart.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Axis>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25744
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.yAxis",
								"description": "A collection of the Y axes in the chart.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Axis>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25752
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.isInsidePlot",
								"description": "Check whether a given point is within the plot area.",
								"kind": "function",
								"parameters": {
									"plotX": {
										"description": "Pixel x relative to the plot area.",
										"types": [
											"number"
										]
									},
									"plotY": {
										"description": "Pixel y relative to the plot area.",
										"types": [
											"number"
										]
									},
									"inverted": {
										"description": "Whether the chart is inverted.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"boolean"
									],
									"description": "Returns true if the given point is inside the plot area."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25826
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.redraw",
								"description": "Redraw the chart after changes have been done to the data, axis extremes chart size or chart elements. All methods for updating axes, series or points have a parameter for redrawing the chart. This is `true` by default. But in many cases you want to do more than one operation on the chart before redrawing, for example add a number of points. In those cases it is a waste of resources to redraw the chart for each new point added. So you add the points and call `chart.redraw()` after.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#afterSetExtremes",
									"Highcharts.Chart#beforeRedraw",
									"Highcharts.Chart#predraw",
									"Highcharts.Chart#redraw",
									"Highcharts.Chart#render",
									"Highcharts.Chart#updatedData"
								],
								"parameters": {
									"animation": {
										"description": "If or how to apply animation to the redraw.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25853
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.get",
								"description": "Get an axis, series or point object by `id` as given in the configuration options. Returns `undefined` if no item is found.",
								"kind": "function",
								"parameters": {
									"id": {
										"description": "The id as given in the configuration options.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Axis",
										"Highcharts.Series",
										"Highcharts.Point",
										"undefined"
									],
									"description": "The retrieved item."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26053
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getSelectedPoints",
								"description": "Returns an array of all currently selected points in the chart. Points can be selected by clicking or programmatically by the {@link Highcharts.Point#select} function.",
								"kind": "function",
								"return": {
									"types": [
										"Array.<Highcharts.Point>"
									],
									"description": "The currently selected points."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26132
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getSelectedSeries",
								"description": "Returns an array of all currently selected series in the chart. Series can be selected either programmatically by the {@link Highcharts.Series#select} function or by checking the checkbox next to the legend item if {@link https://api.highcharts.com/highcharts/plotOptions.series.showCheckbox| series.showCheckBox} is true.",
								"kind": "function",
								"return": {
									"types": [
										"Array.<Highcharts.Series>"
									],
									"description": "The currently selected series."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26157
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setTitle",
								"description": "Set a new title or subtitle for the chart.",
								"kind": "function",
								"parameters": {
									"titleOptions": {
										"description": "New title options. The title text itself is set by the\n       `titleOptions.text` property.",
										"types": [
											"Highcharts.TitleOptions"
										]
									},
									"subtitleOptions": {
										"description": "New subtitle options. The subtitle text itself is set by the\n       `subtitleOptions.text` property.",
										"types": [
											"Highcharts.SubtitleOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart or wait for a later call to\n       `chart.redraw()`.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26179
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.title",
								"description": "The chart title. The title has an `update` method that allows modifying the options directly or indirectly via `chart.update`.",
								"kind": "member",
								"types": [
									"Highcharts.TitleObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26234
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.subtitle",
								"description": "The chart subtitle. The subtitle has an `update` method that allows modifying the options directly or indirectly via `chart.update`.",
								"kind": "member",
								"types": [
									"Highcharts.SubtitleObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26246
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getChartSize",
								"description": "Internal function to get the chart width and height according to options and container size. Sets {@link Chart.chartWidth} and {@link Chart.chartHeight}.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26358
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.chartWidth",
								"description": "The current pixel width of the chart.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26381
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.chartHeight",
								"description": "The current pixel height of the chart.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26391
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setClassName",
								"description": "Set the {@link Chart.container|chart container's} class name, in addition to `highcharts-container`.",
								"kind": "function",
								"parameters": {
									"className": {
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26479
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.container",
								"description": "The containing HTML element of the chart. The container is dynamically inserted into the element given as the `renderTo` parameter in the {@link Highcharts#chart} constructor.",
								"kind": "member",
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26577
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.renderer",
								"description": "The renderer instance of the chart. Each chart instance has only one associated renderer.",
								"kind": "member",
								"types": [
									"Highcharts.SVGRenderer"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26601
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.reflow",
								"description": "Reflows the chart to its container. By default, the chart reflows automatically to its container following a `window.resize` event, as per the {@link https://api.highcharts/highcharts/chart.reflow|chart.reflow} option. However, there are no reliable events for div resize, so if the container is resized without a window resize event, this must be called explicitly.",
								"kind": "function",
								"parameters": {
									"e": {
										"description": "Event arguments. Used primarily when the function is called\n       internally as a response to window resize.",
										"types": [
											"global.Event"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26700
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setSize",
								"description": "Resize the chart to a given width and height. In order to set the width only, the height argument may be skipped. To set the height only, pass `undefined` for the width.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#endResize",
									"Highcharts.Chart#resize"
								],
								"parameters": {
									"width": {
										"description": "The new pixel width of the chart. Since v4.2.6, the argument can\n       be `undefined` in order to preserve the current value (when\n       setting height only), or `null` to adapt to the width of the\n       containing element.",
										"isOptional": true,
										"types": [
											"number",
											"null"
										]
									},
									"height": {
										"description": "The new pixel height of the chart. Since v4.2.6, the argument can\n       be `undefined` in order to preserve the current value, or `null`\n       in order to adapt to the height of the containing element.",
										"isOptional": true,
										"types": [
											"number",
											"null"
										]
									},
									"animation": {
										"description": "Whether and how to apply animation.",
										"isOptional": true,
										"types": [
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26797
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.plotLeft",
								"description": "The current left position of the plot area in pixels.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26919
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.plotTop",
								"description": "The current top position of the plot area in pixels.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26927
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.plotWidth",
								"description": "The current width of the plot area in pixels.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26935
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.plotHeight",
								"description": "The current height of the plot area in pixels.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26946
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.legend",
								"description": "The overview of the chart's series.",
								"kind": "member",
								"types": [
									"Highcharts.Legend"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27338
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.addCredits",
								"description": "Set a new credits label for the chart.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "A configuration object for the new credits.",
										"types": [
											"Highcharts.CreditsOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27424
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.credits",
								"description": "The chart's credits label. The label has an `update` method that allows setting new options as per the {@link https://api.highcharts.com/highcharts/credits|credits options set}.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27441
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.destroy",
								"description": "Remove the chart and purge memory. This method is called internally before adding a second chart into the same container, as well as on window unload to prevent leaks.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#destroy"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27478
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.pointer",
								"description": "The Pointer that keeps track of mouse and touch interaction.",
								"kind": "member",
								"types": [
									"Highcharts.Pointer"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27610
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.addSeries",
								"description": "Add a series to the chart after render time. Note that this method should never be used when adding data synchronously at chart render time, as it adds expense to the calculations and rendering. When adding data at the same time as the chart is initialized, add the series as a configuration option instead. With multiple axes, the `offset` is dynamically adjusted.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#addSeries",
									"Highcharts.Chart#afterAddSeries"
								],
								"parameters": {
									"options": {
										"description": "The config options for the series.",
										"types": [
											"Highcharts.SeriesOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after adding.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Series"
									],
									"description": "The newly created series object."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 34629
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.addAxis",
								"description": "Add an axis to the chart after render time. Note that this method should never be used when adding data synchronously at chart render time, as it adds expense to the calculations and rendering. When adding data at the same time as the chart is initialized, add the axis as a configuration option instead.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The axis options.",
										"types": [
											"Highcharts.XAxisOptions",
											"Highcharts.YAxisOptions",
											"Highcharts.ZAxisOptions"
										]
									},
									"isX": {
										"description": "Whether it is an X axis or a value axis.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after adding.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether and how to apply animation in the redraw.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Axis"
									],
									"description": "The newly generated Axis object."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 34683
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.showLoading",
								"description": "Dim the chart and show a loading text or symbol. Options for the loading screen are defined in {@link https://api.highcharts.com/highcharts/loading|the loading options}.",
								"kind": "function",
								"parameters": {
									"str": {
										"description": "An optional text to show in the loading label instead of the\n       default one. The default text is set in\n       {@link http://api.highcharts.com/highcharts/lang.loading|lang.loading}.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 34732
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.hideLoading",
								"description": "Hide the loading layer.",
								"kind": "function",
								"see": [
									"Highcharts.Chart#showLoading"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 34812
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.propsRequireDirtyBox",
								"description": "These properties cause isDirtyBox to be set to true when updating. Can be extended from plugins.",
								"kind": "member"
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 34851
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.propsRequireUpdateSeries",
								"description": "These properties cause all series to be updated when updating. Can be extended from plugins.",
								"kind": "member"
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 34878
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.update",
								"description": "A generic function to update any element of the chart. Elements can be enabled and disabled, moved, re-styled, re-formatted etc. A special case is configuration objects that take arrays, for example {@link https://api.highcharts.com/highcharts/xAxis|xAxis}, {@link https://api.highcharts.com/highcharts/yAxis|yAxis} or {@link https://api.highcharts.com/highcharts/series|series}. For these collections, an `id` option is used to map the new option set to an existing object. If an existing object of the same id is not found, the corresponding item is updated. So for example, running `chart.update` with a series item without an id, will cause the existing chart's series with the same index in the series array to be updated. When the `oneToOne` parameter is true, `chart.update` will also take care of adding and removing items from the collection. Read more under the parameter description below. See also the {@link https://api.highcharts.com/highcharts/responsive|responsive option set}. Switching between `responsive.rules` basically runs `chart.update` under the hood.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#update",
									"Highcharts.Chart#afterUpdate"
								],
								"parameters": {
									"options": {
										"description": "A configuration object for the new chart options.",
										"types": [
											"Highcharts.Options"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"oneToOne": {
										"description": "When `true`, the `series`, `xAxis` and `yAxis` collections will\n       be updated one to one, and items will be either added or removed\n       to match the new updated options. For example, if the chart has\n       two series and we call `chart.update` with a configuration\n       containing three series, one will be added. If we call\n       `chart.update` with one series, one will be removed. Setting an\n       empty `series` array will remove all series, but leaving out the\n       `series` property will leave all series untouched. If the series\n       have id's, the new series options will be matched by id, and the\n       remaining ones removed.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 34889
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setSubtitle",
								"description": "Shortcut to set the subtitle options. This can also be done from {@link Chart#update} or {@link Chart#setTitle}.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "New subtitle options. The subtitle text itself is set by the\n       `options.text` property.",
										"types": [
											"Highcharts.SubtitleOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35153
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.zoomOut",
								"description": "Zoom the chart out after a user has zoomed in. See also [Axis.setExtremes](/class-reference/Highcharts.Axis#setExtremes).",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#selection"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 41331
									}
								]
							}
						}
					],
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 25518
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.Legend",
						"description": "The overview of the chart's series. The legend object is instanciated internally in the chart constructor, and is available from the `chart.legend` property. Each chart has only one legend.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 24097
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Legend.constructor",
								"description": "The overview of the chart's series. The legend object is instanciated internally in the chart constructor, and is available from the `chart.legend` property. Each chart has only one legend.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The chart instance.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "Legend options.",
										"types": [
											"Highcharts.LegendOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.chart",
								"description": "Chart of this legend.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24131
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.options",
								"description": "Legend options.",
								"kind": "member",
								"types": [
									"Highcharts.LegendOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24177
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.update",
								"description": "Update the legend with new options. Equivalent to running `chart.update` with a legend configuration option.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "Legend options.",
										"types": [
											"Highcharts.LegendOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24199
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.title",
								"description": "SVG element of the legend title.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24447
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.setText",
								"description": "Set the legend item text.",
								"kind": "function",
								"parameters": {
									"item": {
										"description": "The item for which to update the text in the legend.",
										"types": [
											"Highcharts.Point",
											"Highcharts.Series"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24479
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.group",
								"description": "SVG group of the legend.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24902
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.allItems",
								"description": "All items for the legend, which is an array of series for most series and an array of points for pie series and its derivatives.",
								"kind": "member",
								"types": [
									"Array.<(Highcharts.Point|Highcharts.Series)>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24935
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.box",
								"description": "SVG element of the legend box.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24965
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ChartCallbackFunction",
						"description": "Callback for chart constructors.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"chart": {
								"description": "Created chart.",
								"types": [
									"Highcharts.Chart"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 25443
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.TitleObject",
						"description": "The chart title. The title has an `update` method that allows modifying the options directly or indirectly via `chart.update`.",
						"kind": "interface",
						"types": [
							"Highcharts.SVGElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 25452
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.TitleObject.update",
								"description": "Modify options for the title.",
								"kind": "function",
								"parameters": {
									"titleOptions": {
										"description": "Options to modify.",
										"types": [
											"Highcharts.TitleOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25452
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SubtitleObject",
						"description": "The chart subtitle. The subtitle has an `update` method that allows modifying the options directly or indirectly via `chart.update`.",
						"kind": "interface",
						"types": [
							"Highcharts.SVGElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 25467
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SubtitleObject.update",
								"description": "Modify options for the subtitle.",
								"kind": "function",
								"parameters": {
									"subtitleOptions": {
										"description": "Options to modify.",
										"types": [
											"Highcharts.SubtitleOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25467
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.chart",
						"description": "Factory function for basic charts.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"renderTo": {
								"description": "The DOM element to render to, or its id.",
								"isOptional": true,
								"types": [
									"string",
									"Highcharts.HTMLDOMElement"
								]
							},
							"options": {
								"description": "The chart options structure.",
								"types": [
									"Highcharts.Options"
								]
							},
							"callback": {
								"description": "Function to run when the chart has loaded and and all external images\n       are loaded. Defining a\n       {@link https://api.highcharts.com/highcharts/chart.events.load|chart.event.load}\n       handler is equivalent.",
								"isOptional": true,
								"types": [
									"Highcharts.ChartCallbackFunction"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Chart"
							],
							"description": "Returns the Chart object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 25550
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointLabelObject",
						"description": "Configuration hash for the data label and tooltip formatters.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 27940
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.x",
								"description": "For categorized axes this property holds the category name for the point. For other axes it holds the X value.",
								"kind": "member",
								"types": [
									"number",
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27940
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.y",
								"description": "The y value of the point.",
								"kind": "member",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27940
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.color",
								"description": "The point's current color.",
								"kind": "member",
								"types": [
									"Highcharts.ColorString"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27940
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.colorIndex",
								"description": "The point's current color index, used in styled mode instead of `color`. The color index is inserted in class names used for styling.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27940
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.key",
								"description": "The name of the related point.",
								"kind": "member",
								"types": [
									"number",
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27940
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.series",
								"description": "The related series.",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27940
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.point",
								"description": "The related point.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27940
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.percentage",
								"description": "The percentage for related points in a stacked series or pies.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27940
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.total",
								"description": "The total of values in either a stack for stacked series, or a pie in a pie series.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27940
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Point",
						"description": "The Point object. The point objects are generated from the `series.data` configuration objects or raw numbers. They can be accessed from the `Series.points` array. Other ways to instantiate points are through {@link Highcharts.Series#addPoint} or {@link Highcharts.Series#setData}.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 27992
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Point.init",
								"description": "Initialize the point. Called internally based on the `series.data` option.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#afterInit"
								],
								"parameters": {
									"series": {
										"description": "The series object containing this point.",
										"types": [
											"Highcharts.Series"
										]
									},
									"options": {
										"description": "The data in either number, array or object format.",
										"types": [
											"number",
											"Array.<number>",
											"*"
										]
									},
									"x": {
										"description": "Optionally, the X value of the point.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Point"
									],
									"description": "The Point instance."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28004
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.series",
								"description": "The series object associated with the point.",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28031
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.color",
								"description": "The point's current color.",
								"kind": "member",
								"types": [
									"Highcharts.ColorString"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28041
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.colorIndex",
								"description": "The point's current color index, used in styled mode instead of `color`. The color index is inserted in class names used for styling.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28073
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.options",
								"description": "The point's options as applied in the initial configuration, or extended through `Point.update`.",
								"kind": "member",
								"types": [
									"*"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28114
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.y",
								"description": "The y value of the point.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28131
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.x",
								"description": "The x value of the point.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28152
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.setNestedProperty",
								"description": "Set a value in an object, on the property defined by key. The key supports nested properties using dot notation. The function modifies the input object and does not make a copy.",
								"kind": "function",
								"parameters": {
									"object": {
										"description": "The object to set the value on.",
										"types": [
											"*"
										]
									},
									"value": {
										"description": "The value to set.",
										"types": [
											"*"
										]
									},
									"key": {
										"description": "Key to the property to set.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"*"
									],
									"description": "The modified object."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28180
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.optionsToObject",
								"description": "Transform number or array configs into objects. Used internally to unify the different configuration formats for points. For example, a simple number `10` in a line series will be transformed to `{ y: 10 }`, and an array config like `[1, 10]` in a scatter series will be transformed to `{ x: 1, y: 10 }`.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The input option.",
										"types": [
											"number",
											"Array.<number>",
											"*"
										]
									}
								},
								"return": {
									"types": [
										"*"
									],
									"description": "Transformed options."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28213
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.getClassName",
								"description": "Get the CSS class names for individual points. Used internally where the returned value is set on every point.",
								"kind": "function",
								"return": {
									"types": [
										"string"
									],
									"description": "The class names."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28286
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.getZone",
								"description": "In a series with `zones`, return the zone that the point belongs to.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.PlotSeriesZonesOptions"
									],
									"description": "The zone item."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28307
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.getLabelConfig",
								"description": "Return the configuration hash needed for the data label and tooltip formatters.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.PointLabelObject"
									],
									"description": "Abstract object used in formatters and formats."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28409
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.tooltipFormatter",
								"description": "Extendable method for formatting each point's tooltip line.",
								"kind": "function",
								"parameters": {
									"pointFormat": {
										"description": "The point format.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "A string to be concatenated in to the common tooltip text."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28432
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.visible",
								"description": "For certain series types, like pie charts, where individual points can be shown or hidden.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28525
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.dataGroup",
								"description": "Highstock only. If a point object is created by data grouping, it doesn't reflect actual points in the raw data. In this case, the `dataGroup` property holds information that points back to the raw data. - `dataGroup.start` is the index of the first raw data point in the group. - `dataGroup.length` is the amount of points in the group.",
								"kind": "member",
								"products": [
									"highstock"
								],
								"types": [
									"Highcharts.SVGElement",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32030
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.update",
								"description": "Update point with new options (typically x/y data) and optionally redraw the series.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#update"
								],
								"parameters": {
									"options": {
										"description": "The point options. Point options are handled as described under\n       the `series.type.data` item for each series type. For example\n       for a line series, if options is a single number, the point will\n       be given that number as the main y value. If it is an array, it\n       will be interpreted as x and y values respectively. If it is an\n       object, advanced options are applied.",
										"types": [
											"*"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the point is updated. If doing\n       more operations on the chart, it is best practice to set\n       `redraw` to false and call `chart.redraw()` after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35172
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.remove",
								"description": "Remove a point and optionally redraw the series and if necessary the axes",
								"kind": "function",
								"parameters": {
									"redraw": {
										"description": "Whether to redraw the chart or wait for an explicit call. When\n       doing more operations on the chart, for example running\n       `point.remove()` in a loop, it is best practice to set `redraw`\n       to false and call `chart.redraw()` after.",
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35278
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.select",
								"description": "Toggle the selection status of a point.",
								"kind": "function",
								"see": [
									"Highcharts.Chart#getSelectedPoints"
								],
								"fires": [
									"Highcharts.Point#select",
									"Highcharts.Point#unselect"
								],
								"parameters": {
									"selected": {
										"description": "When `true`, the point is selected. When `false`, the point is\n       unselected. When `null` or `undefined`, the selection state is\n       toggled.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"accumulate": {
										"description": "When `true`, the selection is added to other selected points.\n       When `false`, other selected points are deselected. Internally in\n       Highcharts, when\n       {@link http://api.highcharts.com/highcharts/plotOptions.series.allowPointSelect|allowPointSelect}\n       is `true`, selected points are accumulated on Control, Shift or\n       Cmd clicking the point.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 41507
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.selected",
								"description": "Whether the point is selected or not.",
								"kind": "member",
								"see": [
									"Point#select",
									"Chart#getSelectedPoints"
								],
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 41550
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.onMouseOver",
								"description": "Runs on mouse over the point. Called internally from mouse and touch events.",
								"kind": "function",
								"parameters": {
									"e": {
										"description": "The event arguments.",
										"types": [
											"Highcharts.PointerEventObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 41583
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.onMouseOut",
								"description": "Runs on mouse out from the point. Called internally from mouse and touch events.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#mouseOut"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 41604
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.setState",
								"description": "Set the point's state.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#afterSetState"
								],
								"parameters": {
									"state": {
										"description": "The new state, can be one of `''` (an empty string), `hover` or\n       `select`.",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"move": {
										"description": "State for animation.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 41645
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.haloPath",
								"description": "Get the path definition for the halo, which is usually a shadow-like circle around the currently hovered point.",
								"kind": "function",
								"parameters": {
									"size": {
										"description": "The radius of the circular halo.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGPathArray"
									],
									"description": "The path definition."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 41848
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPlotBoxObject",
						"description": "Translation and scale for the plot area of a series.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 28591
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesPlotBoxObject.translateX",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28591
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPlotBoxObject.translateY",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28591
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPlotBoxObject.scaleX",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28591
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPlotBoxObject.scaleY",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28591
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Series",
						"description": "This is the base series prototype that all other series types inherit from. A new series is initialized either through the {@link https://api.highcharts.com/highcharts/series|series} option structure, or after the chart is initialized, through {@link Highcharts.Chart#addSeries}. The object can be accessed in a number of ways. All series and point event handlers give a reference to the `series` object. The chart object has a {@link Highcharts.Chart.series|series} property that is a collection of all the chart's series. The point objects and axis objects also have the same reference. Another way to reference the series programmatically is by `id`. Add an id in the series configuration options, and get the series object by {@link Highcharts.Chart#get}. Configuration options for the series are given in three levels. Options for all series in a chart are given in the {@link https://api.highcharts.com/highcharts/plotOptions.series| plotOptions.series} object. Then options for all series of a specific type are given in the plotOptions of that type, for example `plotOptions.line`. Next, options for one single series are given in the series array, or as arguements to `chart.addSeries`. The data in the series is stored in various arrays. - First, `series.options.data` contains all the original config options for each point whether added by options or methods like `series.addPoint`. - Next, `series.data` contains those values converted to points, but in case the series data length exceeds the `cropThreshold`, or if the data is grouped, `series.data` doesn't contain all the points. It only contains the points that have been created on demand. - Then there's `series.points` that contains all currently visible point objects. In case of cropping, the cropped-away points are not part of this array. The `series.points` array starts at `series.cropStart` compared to `series.data` and `series.options.data`. If however the series data is grouped, these can't be correlated one to one. - `series.xData` and `series.processedXData` contain clean x values, equivalent to `series.data` and `series.points`. - `series.yData` and `series.processedYData` contain clean y values, equivalent to `series.data` and `series.points`.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 28634
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Series.constructor",
								"description": "This is the base series prototype that all other series types inherit from. A new series is initialized either through the {@link https://api.highcharts.com/highcharts/series|series} option structure, or after the chart is initialized, through {@link Highcharts.Chart#addSeries}. The object can be accessed in a number of ways. All series and point event handlers give a reference to the `series` object. The chart object has a {@link Highcharts.Chart.series|series} property that is a collection of all the chart's series. The point objects and axis objects also have the same reference. Another way to reference the series programmatically is by `id`. Add an id in the series configuration options, and get the series object by {@link Highcharts.Chart#get}. Configuration options for the series are given in three levels. Options for all series in a chart are given in the {@link https://api.highcharts.com/highcharts/plotOptions.series| plotOptions.series} object. Then options for all series of a specific type are given in the plotOptions of that type, for example `plotOptions.line`. Next, options for one single series are given in the series array, or as arguements to `chart.addSeries`. The data in the series is stored in various arrays. - First, `series.options.data` contains all the original config options for each point whether added by options or methods like `series.addPoint`. - Next, `series.data` contains those values converted to points, but in case the series data length exceeds the `cropThreshold`, or if the data is grouped, `series.data` doesn't contain all the points. It only contains the points that have been created on demand. - Then there's `series.points` that contains all currently visible point objects. In case of cropping, the cropped-away points are not part of this array. The `series.points` array starts at `series.cropStart` compared to `series.data` and `series.options.data`. If however the series data is grouped, these can't be correlated one to one. - `series.xData` and `series.processedXData` contain clean x values, equivalent to `series.data` and `series.points`. - `series.yData` and `series.processedYData` contain clean y values, equivalent to `series.data` and `series.points`.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The chart instance.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "The series options.",
										"types": [
											"Highcharts.PlotSeriesOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.chart",
								"description": "Read only. The chart that the series belongs to.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30972
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.type",
								"description": "Read only. The series' type, like \"line\", \"area\", \"column\" etc. The type in the series options anc can be altered using {@link Series#update}.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30980
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.options",
								"description": "Read only. The series' current options. To update, use {@link Series#update}.",
								"kind": "member",
								"types": [
									"Highcharts.PlotSeriesOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30989
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.name",
								"description": "The series name as given in the options. Defaults to \"Series {n}\".",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31004
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.visible",
								"description": "Read only. The series' visibility state as set by {@link Series#show}, {@link Series#hide}, or in the initial configuration.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31013
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.selected",
								"description": "Read only. The series' selected state as set by {@link Highcharts.Series#select}.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31022
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.xAxis",
								"description": "Read only. The unique xAxis object associated with the series.",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31158
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.yAxis",
								"description": "Read only. The unique yAxis object associated with the series.",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31165
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.setOptions",
								"description": "Set the series options by merging from the options tree. Called internally on initiating and updating series. This function will not redraw the series. For API usage, use {@link Series#update}.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#afterSetOptions"
								],
								"parameters": {
									"itemOptions": {
										"description": "The series options.",
										"types": [
											"Highcharts.PlotSeriesOptions"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.PlotSeriesOptions"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31283
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getName",
								"description": "Return series name in \"Series {Number}\" format or the one defined by a user. This method can be simply overridden as series name format can vary (e.g. technical indicators).",
								"kind": "function",
								"return": {
									"types": [
										"string"
									],
									"description": "The series name."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31390
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getColor",
								"description": "Get the series' color based on either the options or pulled from global options.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31454
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getSymbol",
								"description": "Get the series' symbol based on either the options or pulled from global options.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31475
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.setData",
								"description": "Apply a new set of data to the series and optionally redraw it. The new data array is passed by reference (except in case of `updatePoints`), and may later be mutated when updating the chart data. Note the difference in behaviour when setting the same amount of points, or a different amount of points, as handled by the `updatePoints` parameter.",
								"kind": "function",
								"parameters": {
									"data": {
										"description": "Takes an array of data in the same format as described under\n       `series.{type}.data` for the given series type, for example a\n       line series would take data in the form described under\n       [series.line.data](https://api.highcharts.com/highcharts/series.line.data).",
										"types": [
											"Array.<*>"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the series is altered. If doing\n       more operations on the chart, it is a good idea to set redraw to\n       false and call {@link Chart#redraw} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "When the updated data is the same length as the existing data,\n       points will be updated by default, and animation visualizes how\n       the points are changed. Set false to disable animation, or a\n       configuration object to set duration or easing.",
										"isOptional": true,
										"types": [
											"Highcharts.AnimationOptionsObject"
										]
									},
									"updatePoints": {
										"description": "When the updated data is the same length as the existing data, or\n       points can be matched by X values, points will be updated instead\n       of replaced. This allows updating with animation and performs\n       better. In this case, the original array is not passed by\n       reference. Set `false` to prevent.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31603
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.data",
								"description": "Read only. An array containing those values converted to points. In case the series data length exceeds the `cropThreshold`, or if the data is grouped, `series.data` doesn't contain all the points. Also, in case a series is hidden, the `data` array may be empty. To access raw values, `series.options.data` will always be up to date. `Series.data` only contains the points that have been created on demand. To modify the data, use {@link Highcharts.Series#setData} or {@link Highcharts.Point#update}.",
								"kind": "member",
								"see": [
									"Series.points"
								],
								"types": [
									"Array.<Point>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32082
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.points",
								"description": "An array containing all currently visible point objects. In case of cropping, the cropped-away points are not part of this array. The `series.points` array starts at `series.cropStart` compared to `series.data` and `series.options.data`. If however the series data is grouped, these can't be correlated one to one. To modify the data, use {@link Highcharts.Series#setData} or {@link Highcharts.Point#update}.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Point>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32099
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getExtremes",
								"description": "Calculate Y extremes for the visible data. The result is set as `dataMin` and `dataMax` on the Series item.",
								"kind": "function",
								"parameters": {
									"yData": {
										"description": "The data to inspect. Defaults to the current data within the\n       visible range.",
										"isOptional": true,
										"types": [
											"Array.<number>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32114
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.translate",
								"description": "Translate data points from raw data values to chart specific positioning data needed later in the `drawPoints` and `drawGraph` functions. This function can be overridden in plugins and custom series type implementations.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32188
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getValidPoints",
								"description": "Return the series points with null points filtered out.",
								"kind": "function",
								"parameters": {
									"points": {
										"description": "The points to inspect, defaults to {@link Series.points}.",
										"isOptional": true,
										"types": [
											"Array.<Highcharts.Point>"
										]
									},
									"insideOnly": {
										"description": "Whether to inspect only the points that are inside the visible\n       view.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Array.<Highcharts.Point>"
									],
									"description": "The valid points."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32385
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.animate",
								"description": "Animate in the series. Called internally twice. First with the `init` parameter set to true, which sets up the initial state of the animation. Then when ready, it is called with the `init` parameter undefined, in order to perform the actual animation. After the second run, the function is removed.",
								"kind": "function",
								"parameters": {
									"init": {
										"description": "Initialize the animation.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32492
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.drawPoints",
								"description": "Draw the markers for line-like series types, and columns or other graphical representation for {@link Point} objects for other series types. The resulting element is typically stored as {@link Point.graphic}, and is created on the first call and updated and moved on subsequent calls.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32554
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.markerAttribs",
								"description": "Get non-presentational attributes for a point. Used internally for both styled mode and classic. Can be overridden for different series types.",
								"kind": "function",
								"see": [
									"Series#pointAttribs"
								],
								"parameters": {
									"point": {
										"description": "The Point to inspect.",
										"types": [
											"Highcharts.Point"
										]
									},
									"state": {
										"description": "The state, can be either `hover`, `select` or undefined.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGAttributes"
									],
									"description": "A hash containing those attributes that are not settable from\n        CSS."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32691
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.pointAttribs",
								"description": "Internal function to get presentational attributes for each point. Unlike {@link Series#markerAttribs}, this function should return those attributes that can also be set in CSS. In styled mode, `pointAttribs` won't be called.",
								"kind": "function",
								"parameters": {
									"point": {
										"description": "The point instance to inspect.",
										"types": [
											"Highcharts.Point"
										]
									},
									"state": {
										"description": "The point state, can be either `hover`, `select` or undefined for\n       normal state.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGAttributes"
									],
									"description": "The presentational attributes to be set on the point."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32756
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.drawGraph",
								"description": "Draw the graph. Called internally when rendering line-like series types. The first time it generates the `series.graph` item and optionally other series-wide items like `series.area` for area charts. On subsequent calls these items are updated with new positions and attributes.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33039
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getPlotBox",
								"description": "Get the translation and scale for the plot area of this series.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.SeriesPlotBoxObject"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33397
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.render",
								"description": "Render the graph and markers. Called internally when first rendering and later when redrawing the chart. This function can be extended in plugins, but normally shouldn't be called directly.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33422
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.addPoint",
								"description": "Add a point to the series after render time. The point can be added at the end, or by giving it an X value, to the start or in the middle of the series.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The point options. If options is a single number, a point with\n       that y value is appended to the series. If it is an array, it will\n       be interpreted as x and y values respectively. If it is an\n       object, advanced options as outlined under `series.data` are\n       applied.",
										"types": [
											"number",
											"Array.<number>",
											"*"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the point is added. When adding\n       more than one point, it is highly recommended that the redraw\n       option be set to false, and instead {@link Chart#redraw} is\n       explicitly called after the adding of points is finished.\n       Otherwise, the chart will redraw after adding each point.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"shift": {
										"description": "If true, a point is shifted off the start of the series as one is\n       appended to the end.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35311
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.removePoint",
								"description": "Remove a point from the series. Unlike the {@link Highcharts.Point#remove} method, this can also be done on a point that is not instanciated because it is outside the view or subject to Highstock data grouping.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#remove"
								],
								"parameters": {
									"i": {
										"description": "The index of the point in the {@link Highcharts.Series.data|data}\n       array.",
										"types": [
											"number"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the point is added. When\n       removing more than one point, it is highly recommended that the\n       `redraw` option be set to `false`, and instead {@link\n       Highcharts.Chart#redraw} is explicitly called after the adding of\n       points is finished.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether and optionally how the series should be animated.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35429
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.remove",
								"description": "Remove a series and optionally redraw the chart.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#remove"
								],
								"parameters": {
									"redraw": {
										"description": "Whether to redraw the chart or wait for an explicit call to\n       {@link Highcharts.Chart#redraw}.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.AnimationOptionsObject"
										]
									},
									"withEvent": {
										"description": "Used internally, whether to fire the series `remove` event.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35500
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.update",
								"description": "Update the series with a new set of options. For a clean and precise handling of new options, all methods and elements from the series are removed, and it is initiated from scratch. Therefore, this method is more performance expensive than some other utility methods like {@link Series#setData} or {@link Series#setVisible}.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#afterUpdate"
								],
								"parameters": {
									"options": {
										"description": "New options that will be merged with the series' existing options.",
										"types": [
											"Highcharts.SeriesOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the series is altered. If doing\n       more operations on the chart, it is a good idea to set redraw to\n       false and call {@link Chart#redraw} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35547
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.drawDataLabels",
								"description": "Draw the data labels",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39596
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.alignDataLabel",
								"description": "Align each individual data label.",
								"kind": "function",
								"parameters": {
									"point": {
										"types": [
											"Highcharts.Point"
										]
									},
									"dataLabel": {
										"types": [
											"Highcharts.SVGElement"
										]
									},
									"options": {
										"types": [
											"Highcharts.PlotSeriesDataLabelsOptions"
										]
									},
									"alignTo": {
										"types": [
											"Highcharts.BBoxObject"
										]
									},
									"isNew": {
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39826
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.justifyDataLabel",
								"description": "If data labels fall partly outside the plot area, align them back in, in a way that doesn't hide the point.",
								"kind": "function",
								"parameters": {
									"dataLabel": {
										"types": [
											"Highcharts.SVGElement"
										]
									},
									"options": {
										"types": [
											"Highcharts.PlotSeriesDataLabelsOptions"
										]
									},
									"alignAttr": {
										"types": [
											"Highcharts.DataLabelAlignObject"
										]
									},
									"bBox": {
										"types": [
											"Highcharts.BBoxObject"
										]
									},
									"isNew": {
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"boolean"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39986
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.onMouseOver",
								"description": "Runs on mouse over the series graphical items.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#mouseOver"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 41876
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.onMouseOut",
								"description": "Runs on mouse out of the series graphical items.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#mouseOut"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 41904
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.setState",
								"description": "Set the state of the series. Called internally on mouse interaction operations, but it can also be called directly to visually highlight a series.",
								"kind": "function",
								"parameters": {
									"state": {
										"description": "Can be either `hover` or undefined to set to normal state.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 41946
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.setVisible",
								"description": "Show or hide the series.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#hide",
									"Highcharts.Series#show"
								],
								"parameters": {
									"visible": {
										"description": "True to show the series, false to hide. If undefined, the\n       visibility is toggled.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the series is altered. If doing\n       more operations on the chart, it is a good idea to set redraw to\n       false and call {@link Chart#redraw|chart.redraw()} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 42030
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.show",
								"description": "Show the series if hidden.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#show"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 42118
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.hide",
								"description": "Hide the series if visible. If the {@link https://api.highcharts.com/highcharts/chart.ignoreHiddenSeries| chart.ignoreHiddenSeries} option is true, the chart is redrawn without this series.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#hide"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 42132
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.select",
								"description": "Select or unselect the series. This means its {@link Highcharts.Series.selected|selected} property is set, the checkbox in the legend is toggled and when selected, the series is returned by the {@link Highcharts.Chart#getSelectedSeries} function.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#select",
									"Highcharts.Series#unselect"
								],
								"parameters": {
									"selected": {
										"description": "True to select the series, false to unselect. If undefined, the\n       selection state is toggled.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 42150
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ColumnMetricsObject",
						"description": "Adjusted width and x offset of the columns for grouping.",
						"kind": "typedef",
						"types": [
							"*"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 36839
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ColumnMetricsObject.width",
								"description": "Width of the columns.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36839
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ColumnMetricsObject.offset",
								"description": "Offset of the columns.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36839
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DataLabelBoxObject",
						"description": "A label box.",
						"kind": "typedef",
						"types": [
							"object"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39385
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DataLabelBoxObject.align",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39385
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataLabelBoxObject.pos",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39385
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataLabelBoxObject.rank",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39385
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataLabelBoxObject.size",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39385
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataLabelBoxObject.target",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39385
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DataLabelAlignObject",
						"description": "Alignment offset for a label.",
						"kind": "typedef",
						"types": [
							"object"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39401
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DataLabelAlignObject.x",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39401
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataLabelAlignObject.y",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39401
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DataLabelPiePosObject",
						"description": "Label position for a pie slice.",
						"kind": "typedef",
						"types": [
							"Array.<(number|string)>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39411
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DataLabelPiePosObject.x",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39411
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataLabelPiePosObject.y",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39411
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.distribute",
						"description": "General distribution algorithm for distributing labels of differing size along a confined length in two dimensions. The algorithm takes an array of objects containing a size, a target and a rank. It will place the labels as close as possible to their targets, skipping the lowest ranked labels if necessary.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"boxes": {
								"types": [
									"Array.<Highcharts.DataLabelBoxObject>"
								]
							},
							"len": {
								"types": [
									"number"
								]
							},
							"maxDistance": {
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39438
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ResponsiveCallbackFunction",
						"description": "A callback function to gain complete control on when the responsive rule applies.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"return": {
							"types": [
								"boolean"
							],
							"description": "Return `true` if it applies."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 42199
							}
						]
					}
				}
			],
			"meta": {
				"files": [
					{
						"path": "code/highcharts.src.js",
						"line": 0
					}
				]
			}
		},
		{
			"doclet": {
				"name": "GlobalSVGElement",
				"description": "Reference to the global SVGElement class as a workaround for a name conflict in the Highcharts namespace.",
				"kind": "typedef",
				"see": [
					"https://developer.mozilla.org/en-US/docs/Web/API/SVGElement"
				],
				"isGlobal": true,
				"types": [
					"global.SVGElement"
				]
			},
			"meta": {
				"files": [
					{
						"path": "code/highcharts.src.js",
						"line": 91
					}
				]
			}
		},
		{
			"doclet": {
				"name": "external:JQuery",
				"description": "Highcharts-extended JQuery.",
				"kind": "external",
				"isGlobal": true
			},
			"meta": {
				"files": [
					{
						"path": "code/highcharts.src.js",
						"line": 2690
					}
				]
			},
			"children": [
				{
					"doclet": {
						"name": "external:JQuery.highcharts",
						"description": "Factory function to create a chart in the current JQuery selector element.",
						"kind": "function",
						"parameters": {
							"className": {
								"description": "Name of the factory class in the Highcharts namespace.",
								"isOptional": true,
								"types": [
									"\"Chart\"",
									"\"Map\"",
									"\"StockChart\"",
									"string"
								]
							},
							"options": {
								"description": "The chart options structure.",
								"types": [
									"Highcharts.Options"
								]
							},
							"callback": {
								"description": "Function to run when the chart has loaded and and all external\n       images are loaded. Defining a [chart.event.load\n       ](https://api.highcharts.com/highcharts/chart.events.load) handler\n       is equivalent.",
								"isOptional": true,
								"types": [
									"Highcharts.ChartCallbackFunction"
								]
							}
						},
						"return": {
							"types": [
								"JQuery"
							],
							"description": "The current JQuery selector."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2696
							}
						]
					}
				}
			]
		}
	]
}