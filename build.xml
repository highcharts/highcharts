<?xml version="1.0" encoding="utf-8"?>
<!-- Highcharts build file -->
<project name="build" default="usage" xmlns:ac="antlib:net.sf.antcontrib">
    <!-- Describes the usage of the build file by invoking -projecthelp. -->
    <target name="usage">
         <java classname="org.apache.tools.ant.Main">
             <arg value="-projecthelp"/>
             <arg value="-quiet"/>
        </java>
    </target>

    <!-- Sets various properties needed during the build. -->
    <target name="set.properties">
        <!-- Read the release names and versions for our products. -->
        <property file="build.properties"/>
        <filterset id="highcharts.filter">
            <filter token="product.name" value="${highcharts.product.name}"/>
            <filter token="product.cdnpath" value="${highcharts.product.cdnpath}"/>
            <filter token="product.version" value="${highcharts.product.version}"/>
            <filter token="product.date" value="${highcharts.product.date}"/>
        </filterset>
        <filterset id="highstock.filter">
            <filter token="product.name" value="${highstock.product.name}"/>
            <filter token="product.cdnpath" value="${highstock.product.cdnpath}"/>
            <filter token="product.version" value="${highstock.product.version}"/>
            <filter token="product.date" value="${highstock.product.date}"/>
        </filterset>
        <filterset id="highmaps.filter">
            <filter token="product.name" value="${highmaps.product.name}"/>
            <filter token="product.cdnpath" value="${highmaps.product.cdnpath}"/>
            <filter token="product.version" value="${highmaps.product.version}"/>
            <filter token="product.date" value="${highmaps.product.date}"/>
        </filterset>
        <filterset id="gantt.filter">
            <filter token="product.name" value="${gantt.product.name}"/>
            <filter token="product.cdnpath" value="${gantt.product.cdnpath}"/>
            <filter token="product.version" value="${gantt.product.version}"/>
            <filter token="product.date" value="${gantt.product.date}"/>
        </filterset>
        <filterset id="download.builder.filter">
            <filter token="product.name" value="${highcharts.product.name} ${highcharts.product.version}"/>
            <filter token="product.version" value="/${highstock.product.name} ${highstock.product.version}"/>
            <filter token="product.date" value="${highcharts.product.date}"/>
        </filterset>

        <!-- folder names -->
        <property name="tools.dir" value="${basedir}/tools"/>
        <property name="build.dir" value="${basedir}/build"/>
        <property name="dist.dir" value="${build.dir}/dist"/>
        <property name="testoutput.dir" value="${build.dir}/tests"/>
        <property name="coveragereport.dir" value="${build.dir}/coverage-report"/>
        <property name="themes.dir" value="${basedir}/js/themes"/>

        <!-- highcharts/highstock src -->
        <property name="highcharts.parts.dir" location="${basedir}/js/parts"/>
        <property name="highchartsmore.parts.dir" location="${basedir}/js/parts-more"/>
        <property name="highcharts3d.parts.dir" location="${basedir}/js/parts-3d"/>

        <property name="highcharts.src.name" value="highcharts.src.js"/>
        <property name="highcharts.src.file" value="${basedir}/js/${highcharts.src.name}"/>
        <property name="highcharts.minified.name" value="highcharts.js"/>
        <property name="highstock.src.name" value="highstock.src.js"/>
        <property name="highstock.src.file" value="${basedir}/js/${highstock.src.name}"/>
        <property name="highstock.minified.name" value="highstock.js"/>
        <property name="gantt.src.name" value="highcharts-gantt.src.js"/>
        <property name="gantt.src.file" value="${basedir}/js/${gantt.src.name}"/>
        <property name="gantt.minified.name" value="highcharts-gantt.js"/>
        <property name="highmaps.src.name" value="highmaps.src.js"/>
        <property name="highmaps.src.file" value="${basedir}/js/${highmaps.src.name}"/>
        <property name="highmaps.minified.name" value="highmaps.js"/>
        <property name="highchartsmore.src.name" value="highcharts-more.src.js"/>
        <property name="highchartsmore.src.file" value="${basedir}/js/${highchartsmore.src.name}"/>
        <property name="highchartsmore.minified.name" value="highcharts-more.js"/>
        <property name="highcharts3d.src.name" value="highcharts-3d.src.js"/>
        <property name="highcharts3d.src.file" value="${basedir}/js/${highcharts3d.src.name}"/>
        <property name="highcharts3d.minified.name" value="highcharts-3d.js"/>
        <!--property name="mootools.src.name" value="mootools-adapter.src.js"/>
        <property name="prototype.src.name" value="prototype-adapter.src.js"/-->
        <property name="standalone.src.name" value="standalone-framework.src.js"/>
        <property name="exporting.src.name" value="exporting.src.js"/>
        <property name="offline-exporting.src.name" value="offline-exporting.src.js"/>
        <property name="boost.src.name" value="boost.src.js"/>
        <property name="broken-axis.src.name" value="broken-axis.src.js"/>
        <property name="data.src.name" value="data.src.js"/>
        <property name="drilldown.src.name" value="drilldown.src.js"/>
        <property name="funnel.src.name" value="funnel.src.js"/>
        <property name="serieslabel.src.name" value="series-label.src.js"/>
        <property name="solidgauge.src.name" value="solid-gauge.src.js"/>
        <property name="nodata.src.name" value="no-data-to-display.src.js"/>
        <property name="map.src.name" value="map.src.js"/>
        <property name="heatmap.src.name" value="heatmap.src.js"/>
        <property name="treemap.src.name" value="treemap.src.js"/>
        <property name="annotations.src.name" value="annotations.src.js"/>
        <!--property name="mootools.minified.name" value="mootools-adapter.js"/>
        <property name="prototype.minified.name" value="prototype-adapter.js"/-->
        <property name="standalone.minified.name" value="standalone-framework.js"/>
        <property name="exporting.minified.name" value="exporting.js"/>
        <property name="offline-exporting.minified.name" value="offline-exporting.js"/>        
        <property name="boost.minified.name" value="boost.js"/>
        <property name="broken-axis.minified.name" value="broken-axis.js"/>
        <property name="data.minified.name" value="data.js"/>
        <property name="drilldown.minified.name" value="drilldown.js"/>
        <property name="funnel.minified.name" value="funnel.js"/>
        <property name="serieslabel.minified.name" value="series-label.js"/>
        <property name="solidgauge.minified.name" value="solid-gauge.js"/>
        <property name="nodata.minified.name" value="no-data-to-display.js"/>
        <property name="map.minified.name" value="map.js"/>
        <property name="heatmap.minified.name" value="heatmap.js"/>
        <property name="treemap.minified.name" value="treemap.js"/>
        <property name="annotations.minified.name" value="annotations.js"/>
        <!--property name="mootools.src.file" value="${basedir}/js/adapters/${mootools.src.name}"/>
        <property name="prototype.src.file" value="${basedir}/js/adapters/${prototype.src.name}"/-->
        <property name="standalone.src.file" value="${basedir}/js/adapters/${standalone.src.name}"/>
        <property name="exporting.src.file" value="${basedir}/js/modules/${exporting.src.name}"/>
        <property name="offline-exporting.src.file" value="${basedir}/js/modules/${offline-exporting.src.name}"/>
        <property name="boost.src.file" value="${basedir}/js/modules/boost.src.js"/>
        <property name="broken-axis.src.file" value="${basedir}/js/modules/broken-axis.src.js"/>
        <property name="data.src.file" value="${basedir}/js/modules/${data.src.name}"/>
        <property name="drilldown.src.file" value="${basedir}/js/modules/${drilldown.src.name}"/>
        <property name="funnel.src.file" value="${basedir}/js/modules/${funnel.src.name}"/>
        <property name="overlapping-datalabels.src.file" value="${basedir}/js/modules/overlapping-datalabels.src.js"/>
        <property name="serieslabel.src.file" value="${basedir}/js/modules/${serieslabel.src.name}"/>
        <property name="solidgauge.src.file" value="${basedir}/js/modules/${solidgauge.src.name}"/>
        <property name="nodata.src.file" value="${basedir}/js/modules/${nodata.src.name}"/>
        <property name="map.src.file" value="${basedir}/js/modules/${map.src.name}"/>
        <property name="heatmap.src.file" value="${basedir}/js/modules/${heatmap.src.name}"/>
        <property name="treemap.src.file" value="${basedir}/js/modules/${treemap.src.name}"/>
        <property name="annotations.src.file" value="${basedir}/js/modules/${annotations.src.name}"/>
        <property name="highstock-all.minified.name" value="highstock-all.js"/>

        
        <!-- ant-contrib -->
        <property name="ant.contrib.dir" value="${tools.dir}/ant-contrib-0.6-bin"/>
        <property name="ant.contrib.jar" location="${ant.contrib.dir}/lib/ant-contrib-0.6.jar"/>
        <taskdef uri="antlib:net.sf.antcontrib" resource="net/sf/antcontrib/antlib.xml" classpath="${ant.contrib.jar}"/>
        <!-- cache-control Amamzon S3 -->
        <tstamp>
            <format property="http.expires.five.years" pattern="E, dd MMM yyyy hh:mm:ss" locale="en,US" offset="1825"/>
        </tstamp>
        <tstamp>
            <format property="http.expires.one.month" pattern="E, dd MMM yyyy hh:mm:ss" locale="en,US" offset="31"/>
        </tstamp>
        <tstamp>
            <format property="http.expires.one.day" pattern="E, dd MMM yyyy hh:mm:ss" locale="en,US" offset="1"/>
        </tstamp>
        <property name="max.age.five.years" value="157680000"/>
        <property name="max.age.one.month" value="2592001"/>
        <property name="max.age.one.day" value="86400"/>
        <!-- This is the list of files for highcharts -->
        <filelist id="highcharts.files" dir="${basedir}/js">
            <file name="parts/Intro.js"/>

            <file name="parts/Globals.js"/>
            <file name="parts/Utilities.js"/>
            <file name="parts/Options.js"/>
            <file name="parts/Color.js"/>
            <file name="parts/SvgRenderer.js"/>
            <file name="parts/Html.js"/>
            <file name="parts/VmlRenderer.js"/>
            <file name="parts/Tick.js"/>
            <file name="parts/PlotLineOrBand.js"/>
            <file name="parts/Axis.js"/>
            <file name="parts/DateTimeAxis.js"/>
            <file name="parts/LogarithmicAxis.js"/> 
            <file name="parts/Tooltip.js"/>
            <file name="parts/Pointer.js"/>
            <file name="parts/TouchPointer.js"/>
            <file name="parts/MSPointer.js"/>
            <file name="parts/Legend.js"/>
            <file name="parts/Chart.js"/>
            <file name="parts/CenteredSeriesMixin.js"/>
			<file name="parts/Point.js"/>
            <file name="parts/Series.js"/>
            <file name="parts/Stacking.js"/>
            <file name="parts/Dynamics.js"/>
            <file name="parts/LineSeries.js"/>
            <file name="parts/AreaSeries.js"/>
            <file name="parts/SplineSeries.js"/>
            <file name="parts/AreaSplineSeries.js"/>
            <file name="parts/ColumnSeries.js"/>
            <file name="parts/BarSeries.js"/>
            <file name="parts/ScatterSeries.js"/>
            <file name="parts/PieSeries.js"/>
            <file name="parts/DataLabels.js"/>
            <file name="modules/overlapping-datalabels.src.js"/>
            <file name="parts/Interaction.js"/>
            <file name="parts/Responsive.js"/>
            <file name="parts/Facade.js"/>
            <file name="parts/Outro.js"/>
        </filelist>

        <!-- This is the list of files for highstock -->
        <filelist id="highstock.files" dir="${basedir}/js">
            <file name="parts/Intro.js"/>
            <file name="parts/Globals.js"/>
            <file name="parts/Utilities.js"/>
            <file name="parts/Options.js"/>
            <file name="parts/Color.js"/>
            <file name="parts/SvgRenderer.js"/>
            <file name="parts/Html.js"/>
            <file name="parts/VmlRenderer.js"/>
            <file name="parts/Tick.js"/>
            <file name="parts/PlotLineOrBand.js"/>
            <file name="parts/Axis.js"/>
            <file name="parts/DateTimeAxis.js"/>
            <file name="parts/LogarithmicAxis.js"/>
            <file name="parts/Tooltip.js"/>
            <file name="parts/Pointer.js"/>
            <file name="parts/TouchPointer.js"/>
            <file name="parts/MSPointer.js"/>
            <file name="parts/Legend.js"/>
            <file name="parts/Chart.js"/>
            <file name="parts/CenteredSeriesMixin.js"/>
            <file name="parts/Point.js"/>
            <file name="parts/Series.js"/>
            <file name="parts/Stacking.js"/>
            <file name="parts/Dynamics.js"/>
            <file name="parts/LineSeries.js"/>
            <file name="parts/AreaSeries.js"/>
            <file name="parts/SplineSeries.js"/>
            <file name="parts/AreaSplineSeries.js"/>
            <file name="parts/ColumnSeries.js"/>
            <file name="parts/BarSeries.js"/>
            <file name="parts/ScatterSeries.js"/>
            <file name="parts/PieSeries.js"/>
            <file name="parts/DataLabels.js"/>
            <file name="modules/overlapping-datalabels.src.js"/>
            <file name="parts/Interaction.js"/>
            <file name="parts/Responsive.js"/>
            <!-- Stock -->
            <file name="parts/OrdinalAxis.js"/>
            <file name="modules/broken-axis.src.js"/>
            <file name="parts/DataGrouping.js"/>
            <file name="parts/OHLCSeries.js"/>
            <file name="parts/CandlestickSeries.js"/>
            <file name="parts/FlagsSeries.js"/>
            <file name="parts/Scrollbar.js"/>
            <file name="parts/Navigator.js"/>
            <file name="parts/RangeSelector.js"/>
            <file name="parts/StockChart.js"/>
            <file name="parts/Facade.js"/>
            <file name="parts/Outro.js"/>
        </filelist>

        <!-- This is the list of files for highcharts-more -->
        <filelist id="highchartsmore.files" dir="${highchartsmore.parts.dir}">
            <file name="Intro.js"/>
            <file name="Pane.js"/>
            <file name="RadialAxis.js"/>
            <file name="AreaRangeSeries.js"/>
            <file name="AreaSplineRangeSeries.js"/>
            <file name="ColumnRangeSeries.js"/>
            <file name="GaugeSeries.js"/>
            <file name="BoxPlotSeries.js"/>
            <file name="ErrorBarSeries.js"/>
            <file name="WaterfallSeries.js"/>
            <file name="PolygonSeries.js"/>
            <file name="BubbleSeries.js"/>
            <file name="Polar.js"/>
        </filelist>

        <!-- This is the list of files for highcharts-3d -->
        <filelist id="highcharts3d.files" dir="${highcharts3d.parts.dir}">
            <file name="Intro.js"/>
            <file name="Math.js"/>
            <file name="SVGRenderer.js"/>
            <file name="Chart.js"/>
            <file name="Axis.js"/>
            <file name="Column.js"/>
            <file name="Pie.js"/>
            <file name="Scatter.js"/>
            <file name="VMLRenderer.js"/>
        </filelist>

        <!-- This is the list of files for the maps module -->
        <filelist id="maps.files" dir="${basedir}/js">
            <file name="parts-map/IntroMapModule.js"/>
            <file name="parts-map/MapAxis.js"/>
            <file name="parts-map/ColorAxis.js"/>
            <file name="parts-map/ColorSeriesMixin.js"/>
            <file name="parts-map/MapNavigation.js"/>
            <file name="parts-map/MapPointer.js"/>
            <file name="parts-map/MapSeries.js"/>
            <file name="parts-map/MapLineSeries.js"/>
            <file name="parts-map/MapPointSeries.js"/>
            <file name="parts-map/MapBubbleSeries.js"/>
            <file name="parts-map/HeatmapSeries.js"/>
            <file name="parts-map/GeoJSON.js"/>
            <file name="parts-map/Map.js"/>
        </filelist>


        <!-- This is the list of files for the heatmap module -->
        <filelist id="heatmap.files" dir="${basedir}/js">
            <file name="parts-map/HeatmapIntro.js"/>
            <!-- file name="parts-map/HeatmapGlobals.js"/ -->
            <!-- file name="parts-map/MapAxis.js"/ -->
            <file name="parts-map/ColorAxis.js"/>
            <!-- file name="parts-map/MapNavigation.js"/ -->
            <!-- file name="parts-map/MapPointer.js"/ -->
            <file name="parts-map/ColorSeriesMixin.js"/>
            <!-- file name="parts-map/MapSeries.js"/ -->
            <!-- file name="parts-map/MapLineSeries.js"/ -->
            <!-- file name="parts-map/MapPointSeries.js"/ -->
            <!-- file name="parts-map/MapBubbleSeries.js"/ -->
            <file name="parts-map/HeatmapSeries.js"/>
            <!-- file name="parts-map/Map.js"/ -->
        </filelist>


        <!-- This is the list of files for Highmaps -->
        <filelist id="highmaps.files" dir="${basedir}/js">
            <file name="parts-map/Intro.js"/>
            <file name="parts/Globals.js"/>
            <file name="parts/Utilities.js"/>
            <file name="parts/Options.js"/>
            <file name="parts/Color.js"/>
            <file name="parts/SvgRenderer.js"/>
            <file name="parts/Html.js"/>
            <file name="parts/VmlRenderer.js"/>
            <file name="parts/Tick.js"/>
            <!-- file name="parts/Stacking.js"/ -->
            <!-- file name="parts/PlotLineOrBand.js"/ -->
            <file name="parts/Axis.js"/>
            <!-- file name="parts/DateTimeAxis.js"/ -->
            <file name="parts/LogarithmicAxis.js"/>
            <file name="parts/Tooltip.js"/>
            <file name="parts/Pointer.js"/>
            <file name="parts/TouchPointer.js"/>
            <file name="parts/MSPointer.js"/>
            <file name="parts/Legend.js"/>
            <file name="parts/Chart.js"/>
            <!-- file name="parts/CenteredSeriesMixin.js"/ -->
            <file name="parts/Point.js"/>
            <file name="parts/Series.js"/>
            <file name="parts/Dynamics.js"/>
            <file name="parts/LineSeries.js"/>
            <!-- file name="parts/AreaSeries.js"/ -->
            <!-- file name="parts/SplineSeries.js"/ -->
            <!-- file name="parts/AreaSplineSeries.js"/ -->
            <file name="parts/ColumnSeries.js"/>
            <!-- file name="parts/BarSeries.js"/ -->
            <file name="parts/ScatterSeries.js"/>
            <!-- file name="parts/PieSeries.js"/ -->
            <file name="parts/DataLabels.js"/>
            <file name="modules/overlapping-datalabels.src.js"/>
            <!-- Maps -->
            <file name="parts-map/MapAxis.js"/>
            <file name="parts-map/ColorAxis.js"/>
            <file name="parts-map/ColorSeriesMixin.js"/>
            <file name="parts-map/MapSeries.js"/>
            <file name="modules/overlapping-datalabels.src.js"/>
            <file name="parts-map/MapNavigation.js"/>
            <file name="parts-map/MapPointer.js"/>
            <file name="parts-map/MapLineSeries.js"/>
            <file name="parts-map/MapPointSeries.js"/>
            <file name="parts-more/BubbleSeries.js"/>
            <file name="parts-map/MapBubbleSeries.js"/>
            <file name="parts-map/GeoJSON.js"/>
            <file name="parts-map/Map.js"/>
            <file name="parts-map/HeatmapSeries.js"/>
            <file name="parts/Interaction.js"/>
            <file name="parts/Responsive.js"/>
            <!-- Outro -->
            <file name="parts/Facade.js"/>
            <file name="parts/Outro.js"/>
        </filelist>

        <!-- Files for the Cloud -->
        <filelist id="highstock-all.files" dir="${dist.dir}">
            <file name="highstock/js/${highstock.minified.name}"/>
            <file name="highstock/js/${highchartsmore.minified.name}"/>
            <file name="highstock/js/${highcharts3d.minified.name}"/>
            <file name="js/modules/${exporting.minified.name}"/>
            <file name="js/modules/${solidgauge.minified.name}"/>
            <file name="js/modules/${funnel.minified.name}"/>
            <file name="js/modules/${nodata.minified.name}"/>
            <file name="js/modules/overlapping-datalabels.js"/>
            <file name="js/modules/${data.minified.name}"/>
        </filelist>

        <!-- Convenience list for modules, used in download builder  -->
        <filelist id="highcharts-modules.files" dir="${basedir}/js">
            <file name="modules/${exporting.src.name}"/>
            <file name="modules/${offline-exporting.src.name}"/>
            <file name="modules/${data.src.name}"/>
            <file name="modules/${drilldown.src.name}"/>
            <file name="modules/${nodata.src.name}"/>
            <file name="modules/${solidgauge.src.name}"/>
            <file name="modules/${funnel.src.name}"/>
        </filelist>
    </target>

    <!-- Builds the source and assembles a distribution package. -->
    <target name="dist" depends="set.properties" description="Builds the source and assembles distribution packages.">
        <!-- Make sure files in the zip have lf line endings -->
        <!-- even if being built on windows -->
        <fixcrlf srcdir="${dist.dir}" includes="**/*.js, **/*.html, **/*.htm, **/*.php, **/*.tsv" eol="lf" encoding="UTF-8" />

        <!-- 5. Create zip files -->
        <zip destfile="${dist.dir}/${highcharts.product.name}-${highcharts.product.version}.zip" basedir="${dist.dir}/highcharts"/>
        <zip destfile="${dist.dir}/${highstock.product.name}-${highstock.product.version}.zip" basedir="${dist.dir}/highstock"/>
        <zip destfile="${dist.dir}/${highmaps.product.name}-${highmaps.product.version}.zip" basedir="${dist.dir}/highmaps"/>
        <zip destfile="${dist.dir}/Highcharts-Gantt-${gantt.product.version}.zip" basedir="${dist.dir}/gantt"/>
        

    </target>

    <!-- gzip javascript files in folder -->
    <target name="gzip-js" description="gzip all javascript versions for upload to Amazon S3" depends="set.properties">
        <property name="gzip.dir" value="${js.dir}/../js-gzip"/>
        <delete dir="${gzip.dir}"/>
        <mkdir dir="${gzip.dir}"/>
        <echo message="placing zipped folder structure in ${gzip.dir}"/>
        <!-- make copy so we don't double-compress files -->
        <sync todir="${gzip.dir}" includeEmptyDirs="true" overwrite="true">
            <fileset dir="${js.dir}" includes="**/*.js,**/*.css,**/*.map"/>
        </sync>
        <ac:for param="file">
            <path>
                <fileset dir="${gzip.dir}"/>
            </path>
            <sequential>
                <!-- we keep the filenames the same and transparently serve gzipped content via http headers -->
                <gzip src="@{file}" destfile="@{file}.gz"/>
                <move file="@{file}.gz" tofile="@{file}" overwrite="true"/>
            </sequential>
        </ac:for>
    </target>
    <target name="put-gzipped-files-to-S3">
        <!-- HINT:    to upload just the contents, specify the directory with a trailing slash, if you want to upload the whole directory specify the directory without trailing slash -->
        <!-- HINT: The sync command will compare checksums and sizes of the remote vs local files and only want to upload those that are new. When using skip-existing only file presence is checked, NOT the content -->
        <echo message="synch local folder: ${local} with remote S3 path: ${remote}"/>
        <!-- Upload the .js files to remote S3 version folder -->
        <!--exec executable="s3cmd" failonerror="true"-->
        <exec dir="${s3cmdDir}" executable="python" failonerror="true">
            <arg line="s3cmd"/>
            <arg value="--guess-mime-type"/>
            <arg value="--add-header=Vary:Accept-Encoding"/>
            <!-- tell proxies to only serve this compressed content to a client who has the accept-encoding header: http://blog.port80software.com/2005/01/21/; NOT REALLY NECESSARY in our case were only serving gzipped js. But it will maybe help for proxy-servers in transition to only gzipped files -->
            <arg value="--add-header=Content-Encoding:gzip"/>
            <arg value="--add-header=Cache-Control:public, max-age=${max.age}"/>
            <arg value="--add-header=Expires:${http.expires}"/>
            <arg value="--encoding=UTF-8"/>
            <arg value="--recursive"/>
            <arg value="--acl-public"/>
            <arg value="--verbose"/>
            <arg value="--no-preserve"/>
            <!--arg value="-!-dry-run" /-->
            <arg value="put"/>
            <arg value="${local}"/>
            <arg value="${remote}/"/>
        </exec>
    </target>
    <!-- synch all files to S3 recursively, but ommit .js files -->
    <target name="put-files-to-S3">
        <echo message="synch local folder: ${local} with remote S3 path: ${remote}"/>
        <exec dir="${s3cmdDir}" executable="python" failonerror="true">
            <arg line="s3cmd"/>
            <arg value="--add-header=Cache-Control:public, max-age=${max.age}"/>
            <arg value="--add-header=Expires:${http.expires}"/>
            <arg value="--guess-mime-type"/>
            <arg value="--encoding=UTF-8"/>
            <arg value="--recursive"/>
            <arg value="--acl-public"/>
            <arg value="--no-preserve"/>
            <arg value="--exclude=**/*.js"/>
            <!--arg value="-!-dry-run" /-->
            <arg value="put"/>
            <arg value="${local}"/>
            <arg value="${remote}/"/>
        </exec>
    </target>
    <target name="put-file-to-S3">
        <echo message="copy a file to : ${local} with remote S3 path: ${remote}"/>
        <exec dir="${s3cmdDir}" executable="python" failonerror="true">
            <arg line="s3cmd"/>
            <arg value="--add-header=Cache-Control:public, max-age=${max.age}"/>
            <arg value="--add-header=Expires:${http.expires}"/>
            <arg value="--guess-mime-type"/>
            <arg value="--encoding=UTF-8"/>
            <arg value="--acl-public"/>
            <arg value="--no-preserve"/>
            <!--arg value="-!   -exclude=*"/>
            <arg value="-!-include=${include.pattern}"/-->
            <!--arg value="-!-dry-run" /-->
            <arg value="put"/>
            <arg value="${local}"/>
            <arg value="${remote}/"/>
        </exec>
    </target>
    <target name="copy-folder-on-S3">
        <echo message="copy a folders and files from : ${from.s3} to: ${to.s3}"/>
        <exec dir="${s3cmdDir}" executable="python" failonerror="true">
            <arg line="s3cmd"/>
            <arg value="--recursive"/>
            <arg value="--guess-mime-type"/>
            <arg value="--encoding=UTF-8"/>
            <arg value="--acl-public"/>
            <arg value="cp"/>
            <arg value="${from.s3}"/>
            <arg value="${to.s3}/"/>
        </exec>
    </target>
    <target name="put-all-versions-nonjs-files-to-S3">
        <!-- This is used to push all versions from local machine to S3 -->
        <echo message="synch local folder: ${local} with remote S3 path: ${remote}"/>
        <echo message="copying all files and folders other than .js"/>
        <exec dir="${s3cmdDir}" executable="python" failonerror="true">
            <arg line="s3cmd"/>
            <!--arg value="-!-skip-existing" /-->
            <arg value="--add-header=Cache-Control:public, max-age=${max.age}"/>
            <arg value="--add-header=Expires:${http.expires}"/>
            <arg value="--guess-mime-type"/>
            <arg value="--encoding=UTF-8"/>
            <arg value="--recursive"/>
            <arg value="--acl-public"/>
            <arg value="--no-preserve"/>
            <arg value="--exclude=**/*.js"/>
            <arg value="--exclude=*.js"/>
            <arg value="--exclude=*.php"/>
            <arg value="--exclude=*.htaccess"/>
            <!--arg value="-!-dry-run" /-->
            <arg value="put"/>
            <arg value="${local}"/>
            <arg value="${remote}/"/>
        </exec>
    </target>
    <target name="deploy-highcharts" depends="set.properties" description="deploy highcharts distribution to Amazon S3">
        <property file="git-ignore-me.properties"/>
        <!-- Get Zip file highcharts -->
        <copy file="${basedir}/build/dist/Highcharts-${highcharts.product.version}.zip" tofile="${basedir}/build/dist/Highcharts-${highcharts.product.version}.zip"/>
        <!-- Upload zip file to S3 -->
        <antcall target="put-file-to-S3">
            <param name="local" value="${basedir}/build/dist/Highcharts-${highcharts.product.version}.zip"/>
            <param name="remote" value="${amazon.s3.bucketname}/zips"/>
            <param name="s3cmdDir" value="${s3cmd.dir}"/>
        </antcall>
        <!-- upload product.js to S3 -->
        <antcall target="put-file-to-S3">
            <param name="local" value="${basedir}/build/dist/products.js"/>
            <param name="remote" value="${amazon.s3.bucketname}"/>
            <param name="s3cmdDir" value="${s3cmd.dir}"/>
        </antcall>
        <antcall target="gzip-js">
            <param name="js.dir" value="${basedir}/build/dist/highcharts/code/"/>
        </antcall>
        <ac:var name="path.var" value=""/>
        <ac:for list="${highcharts.product.version}" delimiter="." param="val">
            <sequential>
                <ac:if>
                    <length string="${path.var}" length="0"/>
                    <then>
                        <ac:var name="path.var" value="@{val}"/>
                        <!-- copy.version will be used later on, to do a remote copy on S3 -->
                        <property name="copy.version" value="@{val}"/>
                        <!-- STEP 1: Copy zipped js/* to ROOT on S3 -->
                        <antcall target="put-gzipped-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/highcharts/js-gzip/"/>
                            <param name="remote" value="${amazon.s3.bucketname}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                        <!-- STEP 2: copy gfx folder to ROOT -->
                        <antcall target="put-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/highcharts/gfx"/>
                            <param name="remote" value="${amazon.s3.bucketname}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                        <!-- STEP 3: Copy to js/* version [= ${path.var} ] on S3 -->
                        <antcall target="put-gzipped-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/highcharts/js-gzip/"/>
                            <param name="remote" value="${amazon.s3.bucketname}/${path.var}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                        <!-- STEP 4: copy gfx folder to version folder on S3-->
                        <antcall target="put-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/highcharts/gfx"/>
                            <param name="remote" value="${amazon.s3.bucketname}/${path.var}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                    </then>
                    <elseif>
                        <!-- UPLOAD TO S3 FOR A FOLDER WITH 3 DIGITS, for example 2.0.0 -->
                        <length string="${path.var}" length="3"/>
                        <then>
                            <ac:var name="path.var" value="${path.var}.@{val}"/>
                            <!-- STEP 1: Copy to js/* version [= ${path.var} ] on S3 -->
                            <antcall target="put-gzipped-files-to-S3">
                                <param name="local" value="${basedir}/build/dist/highcharts/js-gzip/"/>
                                <param name="remote" value="${amazon.s3.bucketname}/${path.var}"/>
                                <param name="s3cmdDir" value="${s3cmd.dir}"/>
                                <param name="http.expires" value="${http.expires.five.years}"/>
                                <param name="max.age" value="${max.age.five.years}"/>
                            </antcall>
                            <!-- STEP 2: copy gfx folder to version folder on S3-->
                            <antcall target="put-files-to-S3">
                                <param name="local" value="${basedir}/build/dist/highcharts/gfx"/>
                                <param name="remote" value="${amazon.s3.bucketname}/${path.var}"/>
                                <param name="s3cmdDir" value="${s3cmd.dir}"/>
                                <param name="http.expires" value="${http.expires.five.years}"/>
                                <param name="max.age" value="${max.age.five.years}"/>
                            </antcall>
                        </then>
                    </elseif>
                    <else>
                        <!-- concatenate version name and assign to path.var-->
                        <!-- COPY FOLDER ON S3, for example, 2 to 2.1 -->
                        <ac:var name="path.var" value="${path.var}.@{val}"/>
                        <antcall target="copy-folder-on-S3">
                            <param name="from.s3" value="${amazon.s3.bucketname}/${copy.version}/"/>
                            <param name="to.s3" value="${amazon.s3.bucketname}/${path.var}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                        </antcall>
                    </else>
                </ac:if>
            </sequential>
        </ac:for>
        <!-- delete dir="${basedir}/build/dist/highcharts/js-gzip"/ -->
    </target>

    <!-- Deploy Highstock to S3 -->
    <target name="deploy-highstock" depends="set.properties" description="deploy highstock distribution to Amazon S3">
        <property file="git-ignore-me.properties"/>
        <copy file="${basedir}/build/dist/Highstock-${highstock.product.version}.zip" tofile="${basedir}/build/dist/Highstock-${highstock.product.version}.zip"/>
        <antcall target="put-file-to-S3">
            <param name="local" value="${basedir}/build/dist/Highstock-${highstock.product.version}.zip"/>
            <param name="remote" value="${amazon.s3.bucketname}/zips"/>
            <param name="s3cmdDir" value="${s3cmd.dir}"/>
            <param name="s3cmdDir" value="${s3cmd.dir}"/>
        </antcall>
        <antcall target="gzip-js">
            <param name="js.dir" value="${basedir}/build/dist/highstock/code/"/>
        </antcall>
        <ac:var name="path.var" value=""/>
        <ac:for list="${highstock.product.version}" delimiter="." param="val">
            <sequential>
                <ac:if>
                    <length string="${path.var}" length="0"/>
                    <then>
                        <ac:var name="path.var" value="@{val}"/>
                        <!-- this will be used later to do a remote copy on S3 -->
                        <property name="copy.version" value="@{val}"/>
                        <!-- Copy zipped js/* to Root on S3 -->
                        <antcall target="put-gzipped-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/highstock/js-gzip/"/>
                            <param name="remote" value="${amazon.s3.bucketname}/stock"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                        <!-- copy gfx folder to Root -->
                        <antcall target="put-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/highstock/gfx"/>
                            <param name="remote" value="${amazon.s3.bucketname}/stock"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                        <!-- Copy to js/* version [= ${path.var} ] on S3 -->
                        <antcall target="put-gzipped-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/highstock/js-gzip/"/>
                            <param name="remote" value="${amazon.s3.bucketname}/stock/${path.var}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                        <!-- copy gfx folder to version folder on S3-->
                        <antcall target="put-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/highstock/gfx"/>
                            <param name="remote" value="${amazon.s3.bucketname}/stock/${path.var}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                    </then>
                    <elseif>
                        <length string="${path.var}" length="3"/>
                        <then>
                            <ac:var name="path.var" value="${path.var}.@{val}"/>
                            <!-- Copy to js/* version [= ${path.var} ] on S3 -->
                            <antcall target="put-gzipped-files-to-S3">
                                <param name="local" value="${basedir}/build/dist/highstock/js-gzip/"/>
                                <param name="remote" value="${amazon.s3.bucketname}/stock/${path.var}"/>
                                <param name="s3cmdDir" value="${s3cmd.dir}"/>
                                <param name="http.expires" value="${http.expires.five.years}"/>
                                <param name="max.age" value="${max.age.five.years}"/>
                            </antcall>
                            <!-- copy gfx folder to version folder on S3-->
                            <antcall target="put-files-to-S3">
                                <param name="local" value="${basedir}/build/dist/highstock/gfx"/>
                                <param name="remote" value="${amazon.s3.bucketname}/stock/${path.var}"/>
                                <param name="s3cmdDir" value="${s3cmd.dir}"/>
                                <param name="http.expires" value="${http.expires.five.years}"/>
                                <param name="max.age" value="${max.age.five.years}"/>
                            </antcall>
                        </then>
                    </elseif>
                    <else>
                        <!-- concatenate version name and assign to path.var-->
                        <ac:var name="path.var" value="${path.var}.@{val}"/>
                        <antcall target="copy-folder-on-S3">
                            <param name="from.s3" value="${amazon.s3.bucketname}/stock/${copy.version}/"/>
                            <param name="to.s3" value="${amazon.s3.bucketname}/stock/${path.var}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                        </antcall>
                    </else>
                </ac:if>
            </sequential>
        </ac:for>
        <!-- delete dir="${basedir}/build/dist/highstock/js-gzip"/ -->
    </target>



    <!-- Deploy Highmaps to S3 -->
    <target name="deploy-highmaps" depends="set.properties" description="Deploy Highmaps distribution to Amazon S3">
        <property file="git-ignore-me.properties"/>
        <copy file="${basedir}/build/dist/Highmaps-${highmaps.product.version}.zip" tofile="${basedir}/build/dist/Highmaps-${highmaps.product.version}.zip"/>
        <antcall target="put-file-to-S3">
            <param name="local" value="${basedir}/build/dist/Highmaps-${highmaps.product.version}.zip"/>
            <param name="remote" value="${amazon.s3.bucketname}/zips"/>
            <param name="s3cmdDir" value="${s3cmd.dir}"/>
            <param name="s3cmdDir" value="${s3cmd.dir}"/>
        </antcall>
        <antcall target="gzip-js">
            <param name="js.dir" value="${basedir}/build/dist/highmaps/code/"/>
        </antcall>
        <ac:var name="path.var" value=""/>
        <ac:for list="${highmaps.product.version}" delimiter="." param="val">
            <sequential>
                <ac:if>
                    <length string="${path.var}" length="0"/>
                    <then>
                        <ac:var name="path.var" value="@{val}"/>
                        <!-- this will be used later to do a remote copy on S3 -->
                        <property name="copy.version" value="@{val}"/>
                        <!-- Copy zipped js/* to Root on S3 -->
                        <antcall target="put-gzipped-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/highmaps/js-gzip/"/>
                            <param name="remote" value="${amazon.s3.bucketname}/maps"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                        <!-- copy gfx folder to Root -->
                        <antcall target="put-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/highmaps/gfx"/>
                            <param name="remote" value="${amazon.s3.bucketname}/maps"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                        <!-- Copy to js/* version [= ${path.var} ] on S3 -->
                        <antcall target="put-gzipped-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/highmaps/js-gzip/"/>
                            <param name="remote" value="${amazon.s3.bucketname}/maps/${path.var}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                        <!-- copy gfx folder to version folder on S3-->
                        <antcall target="put-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/highmaps/gfx"/>
                            <param name="remote" value="${amazon.s3.bucketname}/maps/${path.var}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                    </then>
                    <elseif>
                        <length string="${path.var}" length="3"/>
                        <then>
                            <ac:var name="path.var" value="${path.var}.@{val}"/>
                            <!-- Copy to js/* version [= ${path.var} ] on S3 -->
                            <antcall target="put-gzipped-files-to-S3">
                                <param name="local" value="${basedir}/build/dist/highmaps/js-gzip/"/>
                                <param name="remote" value="${amazon.s3.bucketname}/maps/${path.var}"/>
                                <param name="s3cmdDir" value="${s3cmd.dir}"/>
                                <param name="http.expires" value="${http.expires.five.years}"/>
                                <param name="max.age" value="${max.age.five.years}"/>
                            </antcall>
                            <!-- copy gfx folder to version folder on S3-->
                            <antcall target="put-files-to-S3">
                                <param name="local" value="${basedir}/build/dist/highmaps/gfx"/>
                                <param name="remote" value="${amazon.s3.bucketname}/maps/${path.var}"/>
                                <param name="s3cmdDir" value="${s3cmd.dir}"/>
                                <param name="http.expires" value="${http.expires.five.years}"/>
                                <param name="max.age" value="${max.age.five.years}"/>
                            </antcall>
                        </then>
                    </elseif>
                    <else>
                        <!-- concatenate version name and assign to path.var-->
                        <ac:var name="path.var" value="${path.var}.@{val}"/>
                        <antcall target="copy-folder-on-S3">
                            <param name="from.s3" value="${amazon.s3.bucketname}/maps/${copy.version}/"/>
                            <param name="to.s3" value="${amazon.s3.bucketname}/maps/${path.var}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                        </antcall>
                    </else>
                </ac:if>
            </sequential>
        </ac:for>
    </target>



    <!-- Deploy Gantt to S3 -->
    <target name="deploy-gantt" depends="set.properties" description="Deploy Gantt distribution to Amazon S3">
        <property file="git-ignore-me.properties"/>
        <copy
            file="${basedir}/build/dist/Highcharts-Gantt-${gantt.product.version}.zip"
            tofile="${basedir}/build/dist/Highcharts-Gantt-${gantt.product.version}.zip"
        />
        <antcall target="put-file-to-S3">
            <param name="local" value="${basedir}/build/dist/Highcharts-Gantt-${gantt.product.version}.zip"/>
            <param name="remote" value="${amazon.s3.bucketname}/zips"/>
            <param name="s3cmdDir" value="${s3cmd.dir}"/>
            <param name="s3cmdDir" value="${s3cmd.dir}"/>
        </antcall>
        <antcall target="gzip-js">
            <param name="js.dir" value="${basedir}/build/dist/gantt/code/"/>
        </antcall>
        <ac:var name="path.var" value=""/>
        <ac:for list="${gantt.product.version}" delimiter="." param="val">
            <sequential>
                <ac:if>
                    <length string="${path.var}" length="0"/>
                    <then>
                        <ac:var name="path.var" value="@{val}"/>
                        <!-- this will be used later to do a remote copy on S3 -->
                        <property name="copy.version" value="@{val}"/>
                        <!-- Copy zipped js/* to Root on S3 -->
                        <antcall target="put-gzipped-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/gantt/js-gzip/"/>
                            <param name="remote" value="${amazon.s3.bucketname}/maps"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                        <!-- copy gfx folder to Root -->
                        <antcall target="put-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/gantt/gfx"/>
                            <param name="remote" value="${amazon.s3.bucketname}/maps"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                        <!-- Copy to js/* version [= ${path.var} ] on S3 -->
                        <antcall target="put-gzipped-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/gantt/js-gzip/"/>
                            <param name="remote" value="${amazon.s3.bucketname}/maps/${path.var}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                        <!-- copy gfx folder to version folder on S3-->
                        <antcall target="put-files-to-S3">
                            <param name="local" value="${basedir}/build/dist/gantt/gfx"/>
                            <param name="remote" value="${amazon.s3.bucketname}/maps/${path.var}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                            <param name="http.expires" value="${http.expires.one.day}"/>
                            <param name="max.age" value="${max.age.one.day}"/>
                        </antcall>
                    </then>
                    <elseif>
                        <length string="${path.var}" length="3"/>
                        <then>
                            <ac:var name="path.var" value="${path.var}.@{val}"/>
                            <!-- Copy to js/* version [= ${path.var} ] on S3 -->
                            <antcall target="put-gzipped-files-to-S3">
                                <param name="local" value="${basedir}/build/dist/gantt/js-gzip/"/>
                                <param name="remote" value="${amazon.s3.bucketname}/gantt/${path.var}"/>
                                <param name="s3cmdDir" value="${s3cmd.dir}"/>
                                <param name="http.expires" value="${http.expires.five.years}"/>
                                <param name="max.age" value="${max.age.five.years}"/>
                            </antcall>
                            <!-- copy gfx folder to version folder on S3-->
                            <antcall target="put-files-to-S3">
                                <param name="local" value="${basedir}/build/dist/gantt/gfx"/>
                                <param name="remote" value="${amazon.s3.bucketname}/gantt/${path.var}"/>
                                <param name="s3cmdDir" value="${s3cmd.dir}"/>
                                <param name="http.expires" value="${http.expires.five.years}"/>
                                <param name="max.age" value="${max.age.five.years}"/>
                            </antcall>
                        </then>
                    </elseif>
                    <else>
                        <!-- concatenate version name and assign to path.var-->
                        <ac:var name="path.var" value="${path.var}.@{val}"/>
                        <antcall target="copy-folder-on-S3">
                            <param name="from.s3" value="${amazon.s3.bucketname}/gantt/${copy.version}/"/>
                            <param name="to.s3" value="${amazon.s3.bucketname}/gantt/${path.var}"/>
                            <param name="s3cmdDir" value="${s3cmd.dir}"/>
                        </antcall>
                    </else>
                </ac:if>
            </sequential>
        </ac:for>
    </target>

    <target name="deploy-all">
        <antcall target="deploy-highcharts"></antcall>
        <antcall target="deploy-highstock"></antcall>
        <antcall target="deploy-highmaps"></antcall>
        <antcall target="deploy-gantt"></antcall>
    </target>


    <!-- push whole versions structure from local machine to Amazon S3 -->
    <target name="push-all-versions-to-S3" depends="set.properties">
        <property file="git-ignore-me.properties"/>
        <!-- copy base folder containing all versions to seperate folder for gzipping *.js files. The user is asked om source directory containing all versions -->
        <input message="Please enter which directory you want to gzip, WITHOUT trailing slash!!! :" addproperty="src.versions.dir"/>
        <antcall target="gzip-js">
            <param name="js.dir" value="${src.versions.dir}"/>
        </antcall>
        <!-- synch gzipped files and folders to S3, only containing javascript files with *.js -->
        <antcall target="put-gzipped-files-to-S3">
            <param name="local" value="${src.versions.dir}/../js-gzip/"/>
            <param name="remote" value="${amazon.s3.bucketname}"/>
            <param name="http.expires" value="${http.expires.one.month}"/>
            <param name="max.age" value="${max.age.one.month}"/>
            <param name="s3cmdDir" value="${s3cmd.dir}"/>
        </antcall>
        <!-- synch files and folders containing non-gzipped content -->
        <antcall target="put-all-versions-nonjs-files-to-S3">
            <param name="local" value="${src.versions.dir}/"/>
            <param name="remote" value="${amazon.s3.bucketname}"/>
            <param name="s3cmdDir" value="${s3cmd.dir}"/>
            <param name="http.expires" value="${http.expires.one.month}"/>
            <param name="max.age" value="${max.age.one.month}"/>
        </antcall>
        <delete dir="${src.versions.dir}/../js-gzip"/>
        <echo message="finished!"/>
    </target>

    <!-- Copy the folders and content of /samples and /studies to higcharts.com.site -->
    <target name="copy-to-site" depends="set.properties" description="Copy files from this repo to repository www.highcharts.com">
        <property file="git-ignore-me.properties"/>
        <copy todir="${highcharts.site.dir}/samples">
            <fileset dir="samples"/>
        </copy>
        <copy todir="${highcharts.site.dir}/studies">
            <fileset dir="studies"/>
        </copy>
        <copy todir="${highcharts.site.dir}/js/themes">
            <fileset dir="js/themes"/>
        </copy>
        <copy todir="${highcharts.site.dir}/errors">
            <fileset dir="errors"/>
        </copy>
        <copy todir="${highcharts.site.dir}/lib">
            <fileset dir="vendor"/>
        </copy>
    </target>
</project>
