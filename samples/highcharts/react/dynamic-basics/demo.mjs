// DO NOT EDIT, file is generated by the prepare-react-samples gulp task
import React from 'react';
import ReactDOM from 'react-dom';
import { Chart, Series, Subtitle, Title, YAxis, XAxis, Legend } from '@highcharts/react';
import { Accessibility } from '@highcharts/react/options/Accessibility';
const categories = [
    'Mon',
    'Tue',
    'Wed',
    'Thu',
    'Fri'
];
const seriesCatalog = [
    {
        id: 'line-series',
        name: 'Line — Weekly signups',
        type: 'line',
        options: {
            color: '#1aadce',
            marker: {
                enabled: false
            },
            lineWidth: 3
        },
        data: [
            5,
            7,
            6,
            8,
            9
        ]
    },
    {
        id: 'area-series',
        name: 'Area — Returning users',
        type: 'area',
        options: {
            color: '#90ed7d',
            fillOpacity: 0.4
        },
        data: [
            3,
            4,
            3,
            5,
            6
        ]
    },
    {
        id: 'column-series',
        name: 'Column — New purchases',
        type: 'column',
        options: {
            color: '#f45b5b',
            borderRadius: 4
        },
        data: [
            2,
            3,
            4,
            3,
            5
        ]
    }
];
function SeriesControls({ activeSeriesIds, onToggleSeries, onReset }) {
    return /*#__PURE__*/ React.createElement("div", {
        className: "series-controls",
        role: "group",
        "aria-label": "Series controls"
    }, seriesCatalog.map((series)=>{
        const isActive = activeSeriesIds.includes(series.id);
        return /*#__PURE__*/ React.createElement("button", {
            key: series.id,
            type: "button",
            "aria-pressed": isActive,
            onClick: ()=>onToggleSeries(series.id),
            className: isActive ? 'is-active' : ''
        }, isActive ? `Remove ${series.name}` : `Add ${series.name}`);
    }), /*#__PURE__*/ React.createElement("button", {
        type: "button",
        onClick: onReset,
        disabled: activeSeriesIds.length === 1 && activeSeriesIds[0] === seriesCatalog[0].id
    }, "Reset chart"));
}
export default function ChartComponent() {
    const [activeSeriesIds, setActiveSeriesIds] = React.useState(()=>[
            seriesCatalog[0].id
        ]);
    const toggleSeries = React.useCallback((seriesId)=>{
        setActiveSeriesIds((current)=>{
            if (current.includes(seriesId)) {
                return current.filter((id)=>id !== seriesId);
            }
            return [
                ...current,
                seriesId
            ];
        });
    }, []);
    const resetSeries = React.useCallback(()=>{
        setActiveSeriesIds([
            seriesCatalog[0].id
        ]);
    }, []);
    const activeSeries = React.useMemo(()=>seriesCatalog.filter((series)=>activeSeriesIds.includes(series.id)), [
        activeSeriesIds
    ]);
    return /*#__PURE__*/ React.createElement("div", {
        className: "dynamic-basics-demo"
    }, /*#__PURE__*/ React.createElement(Chart, null, /*#__PURE__*/ React.createElement(Title, null, "Dynamic series (line, area & column)"), /*#__PURE__*/ React.createElement(Subtitle, null, "Toggle between the built-in Highcharts series types at runtime"), /*#__PURE__*/ React.createElement(YAxis, {
        title: {
            text: 'Users'
        }
    }), /*#__PURE__*/ React.createElement(XAxis, {
        categories: categories
    }), /*#__PURE__*/ React.createElement(Legend, {
        enabled: false
    }), /*#__PURE__*/ React.createElement(Accessibility, {
        enabled: true
    }), activeSeries.map((series)=>/*#__PURE__*/ React.createElement(Series, {
            key: series.id,
            type: series.type,
            data: series.data,
            options: {
                ...series.options,
                id: series.id,
                name: series.name
            }
        }))), /*#__PURE__*/ React.createElement(SeriesControls, {
        activeSeriesIds: activeSeriesIds,
        onToggleSeries: toggleSeries,
        onReset: resetSeries
    }));
}
ReactDOM.createRoot(document.querySelector('#container'))?.render(/*#__PURE__*/ React.createElement(ChartComponent, null));
