// DO NOT EDIT, file is generated by the prepare-react-samples gulp task
import React from 'react';
import ReactDOM from 'react-dom';
import { Series, Subtitle, Title } from '@highcharts/react';
import { StockChart } from '@highcharts/react/Stock';
import { SMASeries } from '@highcharts/react/indicators/SMA';
import { EMASeries } from '@highcharts/react/indicators/EMA';
import { PSARSeries } from '@highcharts/react/indicators/PSAR';
const priceSeriesId = 'price-series';
const priceData = [
    [
        '2024-01-01',
        172,
        176,
        169,
        174
    ],
    [
        '2024-01-02',
        174,
        179,
        171,
        177
    ],
    [
        '2024-01-03',
        177,
        181,
        173,
        175
    ],
    [
        '2024-01-04',
        175,
        180,
        172,
        179
    ],
    [
        '2024-01-05',
        179,
        183,
        175,
        182
    ],
    [
        '2024-01-08',
        182,
        186,
        178,
        185
    ],
    [
        '2024-01-09',
        185,
        188,
        181,
        183
    ],
    [
        '2024-01-10',
        183,
        187,
        179,
        181
    ],
    [
        '2024-01-11',
        181,
        185,
        177,
        180
    ],
    [
        '2024-01-12',
        180,
        184,
        176,
        178
    ],
    [
        '2024-01-15',
        178,
        182,
        174,
        181
    ],
    [
        '2024-01-16',
        181,
        185,
        177,
        184
    ],
    [
        '2024-01-17',
        184,
        188,
        180,
        187
    ],
    [
        '2024-01-18',
        187,
        191,
        183,
        189
    ],
    [
        '2024-01-19',
        189,
        194,
        185,
        192
    ]
];
const indicatorCatalog = [
    {
        id: 'sma-14',
        name: 'SMA (14)',
        type: 'sma',
        color: '#1aadce',
        params: {
            period: 14
        }
    },
    {
        id: 'ema-12',
        name: 'EMA (12)',
        type: 'ema',
        color: '#f28f43',
        params: {
            period: 12
        }
    },
    {
        id: 'sar',
        name: 'Parabolic SAR',
        type: 'psar',
        color: '#2b908f',
        params: {
            acceleration: 0.03,
            maxAcceleration: 0.3
        }
    }
];
const indicatorComponents = {
    sma: SMASeries,
    ema: EMASeries,
    psar: PSARSeries
};
function IndicatorControls({ activeIndicators, onAddIndicator, onReset }) {
    return /*#__PURE__*/ React.createElement("div", {
        className: "series-controls",
        role: "group",
        "aria-label": "Indicator controls"
    }, indicatorCatalog.map((indicator)=>{
        const isActive = activeIndicators.some((active)=>active.id === indicator.id);
        return /*#__PURE__*/ React.createElement("button", {
            key: indicator.id,
            onClick: ()=>onAddIndicator(indicator),
            type: "button",
            disabled: isActive
        }, isActive ? `${indicator.name} added` : `Add ${indicator.name}`);
    }), activeIndicators.length > 0 && /*#__PURE__*/ React.createElement("p", {
        className: "active-indicators",
        role: "status"
    }, "Active indicators: ", activeIndicators.map((entry)=>entry.name).join(', ')), /*#__PURE__*/ React.createElement("button", {
        disabled: activeIndicators.length === 0,
        onClick: onReset,
        type: "button"
    }, "Reset indicators"));
}
export default function ChartComponent() {
    const [indicatorSeries, setIndicatorSeries] = React.useState([]);
    const addIndicator = React.useCallback((indicator)=>{
        setIndicatorSeries((current)=>{
            if (current.some((entry)=>entry.id === indicator.id)) {
                return current;
            }
            return [
                ...current,
                {
                    ...indicator,
                    zIndex: 3
                }
            ];
        });
    }, []);
    const resetIndicators = React.useCallback(()=>{
        setIndicatorSeries([]);
    }, []);
    return /*#__PURE__*/ React.createElement("div", {
        className: "dynamic-series-demo"
    }, /*#__PURE__*/ React.createElement(StockChart, null, /*#__PURE__*/ React.createElement(Title, null, "Dynamic stock indicators"), /*#__PURE__*/ React.createElement(Subtitle, null, "Add technical indicator series at runtime"), /*#__PURE__*/ React.createElement(Series, {
        id: priceSeriesId,
        name: "Demo stock",
        type: "candlestick",
        data: priceData,
        zIndex: 2
    }), indicatorSeries.map((indicator)=>{
        const IndicatorComponent = indicatorComponents[indicator.type];
        if (!IndicatorComponent) {
            return null;
        }
        const options = {
            linkedTo: priceSeriesId,
            id: indicator.id,
            name: indicator.name,
            ...indicator.color ? {
                color: indicator.color
            } : {},
            ...indicator.params ? {
                params: indicator.params
            } : {},
            ...indicator.zIndex ? {
                zIndex: indicator.zIndex
            } : {}
        };
        return /*#__PURE__*/ React.createElement(IndicatorComponent, {
            key: indicator.id,
            options: options
        });
    })), /*#__PURE__*/ React.createElement(IndicatorControls, {
        activeIndicators: indicatorSeries,
        onAddIndicator: addIndicator,
        onReset: resetIndicators
    }));
}
ReactDOM.createRoot(document.querySelector('#container'))?.render(/*#__PURE__*/ React.createElement(ChartComponent, null));
