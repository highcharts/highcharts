
QUnit.test('Test algorithm on data updates.', function (assert) {

    var chart = Highcharts.stockChart('container', {
        yAxis: [{
            height: '50%'
        }, {
            top: '60%',
            height: '40%'
        }],
        series: [{
            id: 'main',
            data: [
                459.99,
                448.85,
                446.06,
                450.81,
                442.8,
                448.97,
                444.57,
                441.4,
                430.47,
                420.05,
                431.14,
                425.66,
                430.58,
                431.72,
                437.87,
                428.43,
                428.35,
                432.5,
                443.66,
                455.72,
                454.49,
                452.08,
                452.73,
                461.91,
                463.58,
                461.14,
                452.08,
                442.66,
                428.91,
                429.79,
                431.99,
                427.72,
                423.2,
                426.21,
                426.98,
                435.69,
                434.338
            ]
        }, {
            yAxis: 1,
            type: 'macd',
            linkedTo: 'main',
            params: {
                shortPeriod: 12,
                longPeriod: 26,
                signalPeriod: 9,
                period: 26
            }
        }]
    });


    assert.strictEqual(
        chart.series[0].points.length,
        chart.series[1].points.length + chart.series[1].options.params.period - 1,
        'Initial number of MACD points is correct'
    );

    assert.deepEqual(
        chart.series[1].yData,
        [
            [0, null, 8.275269503907623],
            [0, null, 7.70337838145673],
            [0, null, 6.416074756955879],
            [0, null, 4.2375197832648155],
            [0, null, 2.5525833248657364],
            [0, null, 1.3788857198536562],
            [0, null, 0.10298149119910249],
            [0, null, -1.2584019528031263],
            [-5.108084058828859, 3.037525868733945, -2.070558190094914],
            [-4.527494557592668, 1.9056522293357783, -2.6218423282568892],
            [-3.387775175832581, 1.058708435377633, -2.329066740454948],
            [-2.5917618988259115, 0.4107679606711552, -2.1809939381547565]
        ],
        'Correct values'
    );

    chart.series[0].addPoint(429.8);

    assert.strictEqual(
        chart.series[0].points.length,
        chart.series[1].points.length + chart.series[1].options.params.period - 1,
        'After addPoint number of MACD points is correct'
    );

    chart.series[1].update({
        params: {
            shortPeriod: 8,
            longPeriod: 16,
            signalPeriod: 9,
            period: 16
        }
    });

    assert.strictEqual(
        chart.series[1].points.length > 0,
        true,
        'Long and short SMA / EMA are correct.'
    );

    chart.series[0].setData([
        [1435017600000, 0, 0, 0, 0],
        [1435104000000, 0, 0, 0, 0],
        [1435190400000, 0, 0, 0, 0],
        [1435276800000, 0, 0, 0, 0],
        [1435363200000, 0, 0, 0, 0],
        [1435449600000, 0, 0, 0, 0],
        [1435536000000, 0, 0, 0, 0],
        [1435622400000, 0, 0, 0, 0],
        [1435708800000, 0, 0, 0, 0],
        [1435795200000, 0, 0, 0, 0],
        [1435881600000, 0, 0, 0, 0],
        [1435968000000, 0, 0, 0, 0],
        [1436054400000, 0, 0, 0, 0],
        [1436140800000, 0, 0, 0, 0],
        [1436227200000, 0, 0, 0, 0],
        [1436313600000, 0, 0, 0, 0],
        [1436400000000, 0, 0, 0, 0],
        [1436486400000, 0, 0, 0, 0],
        [1436572800000, 0, 0, 0, 0],
        [1436659200000, 0, 0, 0, 0],
        [1436745600000, 0, 0, 0, 0],
        [1436832000000, 0, 0, 0, 0],
        [1436918400000, 0, 0, 0, 0],
        [1437004800000, 0, 0, 0, 0],
        [1437091200000, 0, 0, 0, 0],
        [1437177600000, 0, 0, 0, 0],
        [1437264000000, 0, 0, 0, 0],
        [1437350400000, 0, 0, 0, 0],
        [1437436800000, 0, 0, 0, 0],
        [1437523200000, 0, 0, 0, 0],
        [1437609600000, 0, 0, 0, 0],
        [1437696000000, 0, 0, 0, 0],
        [1437782400000, 0, 0, 0, 0],
        [1437868800000, 0, 0, 0, 0],
        [1437955200000, 0, 0, 0, 0],
        [1438041600000, 0, 0, 0, 0],
        [1438128000000, 0, 0, 0, 0],
        [1438214400000, 0, 0, 0, 0],
        [1438300800000, 0, 0, 0, 0],
        [1438387200000, 0, 0, 0, 0],
        [1438473600000, 0, 0, 0, 0],
        [1438560000000, 0, 0, 0, 0],
        [1438646400000, 0, 0, 0, 0],
        [1438732800000, 0, 0, 0, 0],
        [1438819200000, 0, 0, 0, 0],
        [1491955200000, 0.0403, 0.0355, 0.03569, 0.0381],
        [1492041600000, 0.04398, 0.03794, 0.0381, 0.04253],
        [1492128000000, 0.04266, 0.03898, 0.04253, 0.04012]
    ]);
/*
    assert.deepEqual(
        chart.series[1].yData,
        [
            [0, null, 0],
            [0, null, 0],
            [0, null, 0],
            [0, null, 0],
            [0, null, 0],
            [0, null, 0],
            [0, null, 0],
            [0, null, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0.002571851851851852, 0.0006429629629629631, 0.0032148148148148153],
            [0.004278005275931203, 0.001712464281945764, 0.005990469557876967],
            [0.005023277556609541, 0.0029682836710981497, 0.00799156122770769]
        ],
        'Correct values'
    );
*/
    chart.series[0].setData([
        459.99,
        448.85,
        446.06,
        450.81,
        442.8,
        448.97,
        444.57,
        441.4,
        430.47,
        420.05,
        431.14,
        425.66,
        430.58,
        431.72,
        437.87,
        428.43,
        428.35,
        432.5,
        443.66,
        455.72,
        454.49,
        452.08,
        452.73,
        461.91,
        463.58,
        461.14,
        452.08,
        442.66,
        428.91,
        429.79,
        431.99,
        427.72,
        423.2,
        426.21,
        426.98,
        435.69,
        434.33
    ], false);

    chart.series[1].update({
        signalLine: {
            styles: {
                lineWidth: 10,
                lineColor: 'red'
            }
        },
        macdLine: {
            styles: {
                lineWidth: 10,
                lineColor: 'blue'
            }
        },
        params: {
            shortPeriod: 10,
            longPeriod: 24,
            signalPeriod: 7,
            period: 24
        }
    });

    assert.deepEqual(
        chart.series[1].yData,
        [
            [0, null, 2.009761429289483], [0, null, 1.8993623815397882], [0, null, 3.495107645502287],
            [0, null, 5.685067060259314], [0, null, 7.728053717036346], [0, null, 8.874984710071601],
            [2.755190011641081, 5.407921159223316, 8.163111170864397],
            [-0.29114458390376186, 5.310872964588729, 5.019728380684967],
            [-1.7051015772638776, 4.742505772167436, 3.0374041949035586],
            [-1.837291791774346, 4.1300751749093205, 2.2927833831349744],
            [-2.49033513901796, 3.299963461903334, 0.8096283228853736],
            [-3.359983019981323, 2.1799691219095596, -1.1800138980717634],
            [-3.78373967629286, 0.9187225631452729, -2.8650171131475872],
            [-3.674629112859948, -0.30615380780804313, -3.980782920667991]
        ],
        'Correct values'
    );

    assert.strictEqual(
        chart.series[1].graphsignal.attr('stroke'),
        'red',
        'Line color changed'
    );

    assert.strictEqual(
        chart.series[1].graphmacd.attr('stroke'),
        'blue',
        'Line color changed'
    );

    chart.series[0].points[27].remove();

    assert.deepEqual(
        chart.series[1].yData,
        [
            [0, null, 2.009761429289483], [0, null, 1.8993623815397882], [0, null, 3.495107645502287],
            [0, null, 5.685067060259314], [0, null, 8.828053717036369], [0, null, 9.816584710071595],
            [0.9123374402124522, 5.441045730651881, 6.353383170864333],
            [-0.9975912415661963, 5.108515316796483, 4.110924075230287],
            [-1.4652281468941535, 4.620105934498431, 3.1548777876042777],
            [-2.340051362958811, 3.840088813512161, 1.50003745055335],
            [-3.3517260665056896, 2.722846791343598, -0.6288792751620917],
            [-3.8621861274859866, 1.4354514155149358, -2.4267347119710507],
            [-3.801955422627872, 0.16813294130564516, -3.633822481322227]
        ],
        'Correct values after point.remove()'
    );

    chart.series[0].update({
        dataGrouping: {
            forced: true
        }
    });

    assert.ok(
        chart.series[1].currentDataGrouping !== undefined,
        'DataGrouping applied to MACD series too (#7823).'
    );


    Highcharts.seriesTypes.macd.prototype.getValues(
        {
            xData: [0],
            yData: [1]
        },
        Highcharts.getOptions().plotOptions.macd.params
    );

    assert.ok(
        true,
        'No error when longPeriod is greater than data length (#8376).'
    );

    Highcharts.seriesTypes.macd.prototype.getValues(
        {
            xData: [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            ],
            yData: [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            ]
        },
        Highcharts.getOptions().plotOptions.macd.params
    );

    assert.ok(
        true,
        'No error when periods are greater than data length (#8847).'
    );


    // Last test: destroy MACD:
    chart.series[1].remove();
    assert.ok(
        true,
        'No error when removing MACD without lines (#8848).'
    );
});
